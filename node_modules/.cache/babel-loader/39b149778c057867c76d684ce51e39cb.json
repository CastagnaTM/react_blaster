{"ast":null,"code":"var _jsxFileName = \"/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/LevelContainer.js\";\nimport React, { Component } from 'react';\nimport Targets from '../Components/Targets';\nimport LevelEnd from '../Components/LevelEnd';\nimport FlipMove from 'react-flip-move';\nimport LevelOneSong from '../Assets/Audio/standIn.mp3';\nimport friendlySmall from '../Assets/FriendlySmall.png';\nimport friendlyStrike from '../Assets/FriendlyStrike.png';\nimport healthFull from '../Assets/HealthFull.png';\nimport health3 from '../Assets/Health3.png';\nimport health2 from '../Assets/Health2.png';\nimport health1 from '../Assets/Health1.png';\nimport healthEmpty from '../Assets/HealthEmpty.png';\nlet music = new Audio(LevelOneSong);\nlet health = healthFull;\nexport default class LevelContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedLevel: this.props.selectedLevel,\n      //this should hold all info the container needs to render this level\n      health: this.props.health,\n      targets: null,\n      counter: 0,\n      isClicked: false,\n      levelPoints: 0,\n      success: false,\n      levelEnd: false,\n      firendlyBackgroundColor: '#18FCFF',\n      debrisBackgroundColor: '#0B162A',\n      hitFriendlyCount: 0\n    };\n\n    this.componentDidMount = () => {\n      this.runGame();\n    };\n\n    this.handleClick = (name, target_type) => {\n      //finds the target that was clicked\n      let thisTarget = this.state.targets.find(target => target.name === name);\n\n      if (thisTarget.isClicked === false) {\n        thisTarget.isClicked = true; //conditional for responding to target type\n\n        if (target_type === 'debris') {\n          this.setState({\n            isClicked: true,\n            levelPoints: this.state.levelPoints + 1\n          });\n        }\n\n        if (target_type === 'friendly') {\n          this.setState({\n            isClicked: true,\n            levelPoints: this.state.levelPoints - 2,\n            hitFriendlyCount: this.state.hitFriendlyCount + 1\n          });\n        }\n\n        if (target_type === 'bomb') {\n          this.setState({\n            isClicked: true,\n            health: this.state.health - 1\n          });\n          console.log(this.state.health);\n        }\n      }\n    };\n\n    this.resetTargets = () => {\n      let targetsCopy = [...this.state.targets];\n\n      for (const target of targetsCopy) {\n        target.isClicked = false;\n      }\n    };\n\n    this.establishTargets = string => {\n      let targets = [];\n      let targetArray = string.split('');\n\n      for (let i = 0; i < targetArray.length; i++) {\n        if (targetArray[i] === '0') {\n          targets.push({\n            name: i,\n            target_type: 'debris',\n            isClicked: false\n          });\n        } else if (targetArray[i] === '1') {\n          targets.push({\n            name: i,\n            target_type: 'friendly',\n            isClicked: false\n          });\n        } else if (targetArray[i] === '2') {\n          targets.push({\n            name: i,\n            target_type: 'bomb',\n            isClicked: false\n          });\n        }\n      }\n\n      this.setState({\n        targets: targets\n      });\n    };\n\n    this.loadLevelGrid = () => {\n      this.setState({\n        targets: this.shuffleGrid(this.state.targets)\n      });\n    };\n\n    this.shuffleGrid = array => {\n      let currentIndex = array.length,\n          temp,\n          random;\n\n      while (0 !== currentIndex) {\n        random = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temp = array[currentIndex];\n        array[currentIndex] = array[random];\n        array[random] = temp;\n      }\n\n      return array;\n    };\n\n    this.renderTargets = () => {\n      return React.createElement(FlipMove, {\n        staggerDelayBy: 100,\n        appearAnimation: \"elevator\",\n        enterAnimation: \"fade\",\n        leaveAnimation: \"fade\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, this.state.targets.map(target => React.createElement(Targets, Object.assign({\n        handleClick: this.handleClick,\n        key: target.name\n      }, target, {\n        friendlyBackgroundColor: this.state.friendlyBackgroundColor,\n        debrisBackgroundColor: this.state.debrisBackgroundColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }))));\n    };\n\n    this.playMusic = () => {\n      music.play();\n    };\n\n    this.stopMusic = () => {\n      music.pause();\n      music.currentTime = 0.0;\n    };\n\n    this.getHealth = () => {\n      if (this.state.health === 4) {\n        return healthFull;\n      } else if (this.state.health === 3) {\n        return health3;\n      } else if (this.state.health === 2) {\n        return health2;\n      } else if (this.state.health === 1) {\n        return health1;\n      } else {\n        return healthEmpty;\n      }\n    };\n\n    this.runGame = () => {\n      //translate targets function\n      if (this.state.targets === null) {\n        this.establishTargets(this.state.selectedLevel.targetString);\n      }\n\n      this.playMusic();\n      var gameLoop = setInterval(() => {\n        this.resetTargets();\n        this.loadLevelGrid();\n        this.setState({\n          counter: this.state.counter + 1\n        }); //conditions for level ending\n\n        if (this.state.counter === 16 && this.state.points >= this.state.selectedLevel.goal) {\n          //add condition for winning: a certain number of points needed per level\n          clearInterval(gameLoop);\n          this.stopMusic();\n          this.setState({\n            success: true,\n            levelEnd: true\n          });\n        } else if (this.state.levelPoints < 0 || this.state.hitFriendlyCount === 3 || this.state.health === 0) {\n          clearInterval(gameLoop);\n          this.stopMusic();\n          this.setState({\n            levelEnd: true\n          });\n        }\n      }, this.state.selectedLevel.BPM);\n    };\n  }\n\n  render() {\n    if (this.state.targets === null) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"LOADING!\");\n    }\n\n    if (this.state.levelEnd) {\n      return React.createElement(\"div\", {\n        className: this.props.selectedLevel.css,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(LevelEnd, {\n        health: this.state.health,\n        success: this.state.success,\n        levelPoints: this.state.levelPoints,\n        levelEnd: this.state.levelEnd,\n        levelComplete: this.props.levelComplete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      className: this.props.selectedLevel.css,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"level-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"health-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"health-img\",\n      src: this.getHealth(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-play-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, this.renderTargets())))), React.createElement(\"div\", {\n      className: \"score-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"strikes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"strikes-tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"stikes-img\",\n      src: this.state.hitFriendlyCount >= 1 ? friendlyStrike : friendlySmall,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"strikes-tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"stikes-img\",\n      src: this.state.hitFriendlyCount >= 2 ? friendlyStrike : friendlySmall,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"strikes-tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"stikes-img\",\n      src: this.state.hitFriendlyCount === 3 ? friendlyStrike : friendlySmall,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"level-score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        color: 'whitesmoke',\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Score: \", this.state.levelPoints))));\n  }\n\n}\n{\n  /* */\n}","map":{"version":3,"sources":["/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/LevelContainer.js"],"names":["React","Component","Targets","LevelEnd","FlipMove","LevelOneSong","friendlySmall","friendlyStrike","healthFull","health3","health2","health1","healthEmpty","music","Audio","health","LevelContainer","state","selectedLevel","props","targets","counter","isClicked","levelPoints","success","levelEnd","firendlyBackgroundColor","debrisBackgroundColor","hitFriendlyCount","componentDidMount","runGame","handleClick","name","target_type","thisTarget","find","target","setState","console","log","resetTargets","targetsCopy","establishTargets","string","targetArray","split","i","length","push","loadLevelGrid","shuffleGrid","array","currentIndex","temp","random","Math","floor","renderTargets","map","friendlyBackgroundColor","playMusic","play","stopMusic","pause","currentTime","getHealth","targetString","gameLoop","setInterval","points","goal","clearInterval","BPM","render","css","levelComplete","color","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Targets from '../Components/Targets'\nimport LevelEnd from '../Components/LevelEnd'\nimport FlipMove from 'react-flip-move'\nimport LevelOneSong from '../Assets/Audio/standIn.mp3'\nimport friendlySmall from '../Assets/FriendlySmall.png'\nimport friendlyStrike from '../Assets/FriendlyStrike.png'\nimport healthFull from '../Assets/HealthFull.png'\nimport health3 from '../Assets/Health3.png'\nimport health2 from '../Assets/Health2.png'\nimport health1 from '../Assets/Health1.png'\nimport healthEmpty from '../Assets/HealthEmpty.png'\nlet music = new Audio(LevelOneSong)\nlet health = healthFull;\n\n\nexport default class LevelContainer extends Component{\n\n    //refactor later to use a switch statement to run through these functions based on which level is selected\n\n    state = {\n        selectedLevel: this.props.selectedLevel, //this should hold all info the container needs to render this level\n        health: this.props.health,\n        targets: null,\n        counter: 0,\n        isClicked: false,\n        levelPoints: 0,\n        success: false,\n        levelEnd: false,\n        firendlyBackgroundColor: '#18FCFF',\n        debrisBackgroundColor: '#0B162A',\n        hitFriendlyCount: 0\n    }\n\n    //loads everything and holds setInterval loops\n    componentDidMount = () => {\n        this.runGame()    \n    }\n\n    //function for handling target clicks\n    handleClick = (name, target_type) => {\n        //finds the target that was clicked\n        let thisTarget = this.state.targets.find(target => target.name === name)\n        if(thisTarget.isClicked === false){\n            thisTarget.isClicked = true\n            //conditional for responding to target type\n            if(target_type === 'debris'){\n                this.setState({\n                    isClicked: true,\n                    levelPoints: this.state.levelPoints+1\n                })\n            }\n            if(target_type === 'friendly'){\n                this.setState({\n                    isClicked: true,\n                    levelPoints: this.state.levelPoints-2,\n                    hitFriendlyCount: this.state.hitFriendlyCount+1\n                })\n            }\n            if(target_type === 'bomb'){\n                this.setState({\n                    isClicked: true,\n                    health: this.state.health-1\n                })\n                console.log(this.state.health)\n            }\n        }\n       \n    }\n\n    // resets the state for targets, used for setInterval loop\n    resetTargets = () => {\n        let targetsCopy = [...this.state.targets];\n        for(const target of targetsCopy){\n            target.isClicked = false\n        }\n    }\n    //translates targetString into objects\n    establishTargets = (string) => {\n        \n        let targets = [];\n        let targetArray = string.split('');\n        for (let i = 0; i < targetArray.length; i++){\n            if(targetArray[i] === '0'){\n                targets.push({name: i, target_type: 'debris', isClicked: false})\n            }\n            else if(targetArray[i] === '1'){\n                targets.push({name: i, target_type: 'friendly', isClicked: false})\n            }\n            else if(targetArray[i] === '2'){\n                targets.push({name: i, target_type: 'bomb', isClicked: false})\n            }\n        }\n        this.setState({\n            targets: targets\n        })\n    }\n  \n    //load the targets\n    loadLevelGrid = () => {\n        this.setState({\n            targets: this.shuffleGrid(this.state.targets)\n        })\n    }\n\n    //shuffles the targets for loading\n    shuffleGrid = (array) => {\n        let currentIndex = array.length, temp, random;\n        while(0 !== currentIndex){\n            random = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temp = array[currentIndex];\n            array[currentIndex] = array[random];\n            array[random] = temp;\n        }\n        return array\n    }\n\n    // passes the targets to the Target component\n    renderTargets = () => {\n        return <FlipMove\n        staggerDelayBy={100}\n        appearAnimation=\"elevator\"\n        enterAnimation=\"fade\"\n        leaveAnimation=\"fade\"\n        >\n        {this.state.targets.map(target => <Targets \n        handleClick={this.handleClick} key={target.name}{...target}\n        friendlyBackgroundColor={this.state.friendlyBackgroundColor}\n        debrisBackgroundColor={this.state.debrisBackgroundColor}\n        />)}\n        </FlipMove>\n    }\n    playMusic = () => {\n        music.play();\n    }\n\n    stopMusic = () => {\n        music.pause();\n        music.currentTime = 0.0;\n    }\n\n    getHealth = () => {\n        if(this.state.health === 4){\n            return healthFull;\n        }\n        else if (this.state.health === 3){\n            return health3;\n        }\n        else if(this.state.health === 2){\n            return health2;\n        }\n        else if (this.state.health === 1){\n            return health1;\n        }\n        else{\n            return healthEmpty;\n        }\n    }\n\n    runGame = () => {\n        //translate targets function\n        if (this.state.targets === null){\n            this.establishTargets(this.state.selectedLevel.targetString)\n        }\n        this.playMusic();\n        var gameLoop = setInterval(() =>{\n            this.resetTargets()\n            this.loadLevelGrid()\n            this.setState({\n                counter: this.state.counter+1\n            })\n            //conditions for level ending\n            if(this.state.counter === 16 && this.state.points >= this.state.selectedLevel.goal){ //add condition for winning: a certain number of points needed per level\n                clearInterval(gameLoop)\n                this.stopMusic()\n                this.setState({\n                    success: true,\n                    levelEnd: true\n                })\n            }\n            else if(this.state.levelPoints < 0 || this.state.hitFriendlyCount === 3\n                || this.state.health === 0){\n                clearInterval(gameLoop)\n                this.stopMusic()\n                this.setState({\n                    levelEnd: true\n                })\n            }\n        }, this.state.selectedLevel.BPM)\n    }\n\n    render() {\n        if (this.state.targets === null){\n            return <h1>LOADING!</h1>\n        }\n        if (this.state.levelEnd){\n            return(\n                <div className={this.props.selectedLevel.css}>\n                    <LevelEnd\n                    health={this.state.health} \n                    success={this.state.success}\n                    levelPoints={this.state.levelPoints}\n                    levelEnd={this.state.levelEnd}\n                    levelComplete={this.props.levelComplete}\n                    />\n                </div>    \n            )\n        }\n        return (\n\n            <div className={this.props.selectedLevel.css}>\n                <div className='level-column'>\n                    <div className='health-container'>\n                        <img className='health-img' src={this.getHealth()}></img>\n                    </div>\n                    <div className='game-play-container'>\n                        <div className='tile-grid-container'>\n                            <div className='tile-grid'>\n                                {this.renderTargets()}\n                            </div>\n                        </div>\n                        \n                    </div>\n                </div>\n                <div className='score-container'>\n                    <div className='strikes'>   \n                        <div className='strikes-tile'>\n                            <img className='stikes-img' src={this.state.hitFriendlyCount >= 1 ? friendlyStrike : friendlySmall}></img>\n                        </div>\n                        <div className='strikes-tile'>\n                            <img className='stikes-img' src={this.state.hitFriendlyCount >= 2 ? friendlyStrike : friendlySmall}></img>\n                        </div>\n                        <div className='strikes-tile'>        \n                            <img className='stikes-img' src={this.state.hitFriendlyCount === 3 ? friendlyStrike : friendlySmall}></img>\n                        </div>\n                    </div> \n                    <div className='level-score'>\n                        <p style={{color:'whitesmoke', textAlign: 'center'}}>Score: {this.state.levelPoints}</p>\n                    </div>\n                </div> \n            </div>\n            \n        )\n    }\n}\n\n{/* */}"]},"metadata":{},"sourceType":"module"}