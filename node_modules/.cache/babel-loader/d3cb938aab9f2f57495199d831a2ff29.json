{"ast":null,"code":"var _jsxFileName = \"/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/LevelContainer.js\";\nimport React, { Component } from 'react';\nimport Tiles from '../Components/Tiles';\nimport '../App.css';\nimport friendly1 from '../Assets/Friendly1.png';\nimport friendlySad from '../Assets/FriendlySad.png';\nexport default class LevelContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedLevel: this.props.selectedLevel,\n      targets: null,\n      counter: 0 // tiles: [{name: 'one'},{name: 'two'},{name: 'three'},{name: 'four'},{name: 'five'},{name: 'six'},{name: 'seven'},{name: 'eight'},{name: 'nine'},{name: 'ten'},{name: 'eleven'},{name: 'twelve'}]\n\n    };\n\n    this.componentDidMount = () => {\n      this.interval = setInterval(() => {\n        this.loadLevelOne();\n        this.setState({\n          counter: this.state.counter + 1\n        });\n        console.log('container ' + this.state.counter);\n      }, 4000);\n    };\n\n    this.loadLevelOneGrid = () => {\n      let targets = [{\n        name: 'one',\n        target_type: 'debris'\n      }, {\n        name: 'two',\n        target_type: 'debris'\n      }, {\n        name: 'three',\n        target_type: 'debris'\n      }, {\n        name: 'four',\n        target_type: 'friendly'\n      }];\n      let targetsCopy = [];\n      targetsCopy = this.shuffleGrid(targets);\n      return targetsCopy;\n    };\n\n    this.loadLevelOne = () => {\n      let targets = this.loadLevelOneGrid();\n      this.setState({\n        targets: targets\n      });\n    };\n\n    this.shuffleGrid = array => {\n      let newArr = []; // while(newArr.length < array.length){\n      //     let x = array[Math.floor(Math.random() * array.length)]\n      //     if (!newArr.includes(x)){\n      //         newArr.push(x)\n      //     }\n      // }\n      // for(let i = array.length-1; i > 0; i--){\n      //     let j = await(Math.floor(Math.random() *(i+1)))\n      //     [array[i], array[j]] = [array[j], array[i]]\n      // }\n\n      let currentIndex = array.length,\n          temp,\n          random;\n\n      while (0 !== currentIndex) {\n        random = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temp = array[currentIndex];\n        array[currentIndex] = array;\n      }\n\n      return newArr;\n    };\n  }\n\n  render() {\n    if (this.state.targets === null) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"LOADING!\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"tile-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.state.targets.map((tile, i) => React.createElement(Tiles, Object.assign({\n      key: i\n    }, tile, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/LevelContainer.js"],"names":["React","Component","Tiles","friendly1","friendlySad","LevelContainer","state","selectedLevel","props","targets","counter","componentDidMount","interval","setInterval","loadLevelOne","setState","console","log","loadLevelOneGrid","name","target_type","targetsCopy","shuffleGrid","array","newArr","currentIndex","length","temp","random","Math","floor","render","map","tile","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Tiles from '../Components/Tiles'\nimport '../App.css'\nimport friendly1 from '../Assets/Friendly1.png'\nimport friendlySad from '../Assets/FriendlySad.png'\n\n\n\nexport default class LevelContainer extends Component{\n\n    //refactor later to use a switch statement to run through these functions based on which level is selected\n\n    state = {\n        selectedLevel: this.props.selectedLevel,\n        targets: null,\n        counter: 0\n        // tiles: [{name: 'one'},{name: 'two'},{name: 'three'},{name: 'four'},{name: 'five'},{name: 'six'},{name: 'seven'},{name: 'eight'},{name: 'nine'},{name: 'ten'},{name: 'eleven'},{name: 'twelve'}]\n    }\n    \n    componentDidMount = () => {\n        this.interval = setInterval(() =>{\n            this.loadLevelOne()\n            this.setState({\n                counter: this.state.counter + 1\n            })\n            console.log('container '+this.state.counter)\n        }, 4000)    \n    }\n   \n\n    //figure out randomization and then looping\n    loadLevelOneGrid = () => {\n        let targets = [{name: 'one', target_type: 'debris'},{name: 'two', target_type: 'debris'},{name: 'three', target_type: 'debris'},{name: 'four', target_type: 'friendly'}];\n        let targetsCopy = [];\n        targetsCopy = this.shuffleGrid(targets)\n        return targetsCopy\n    }\n\n    loadLevelOne = () => {\n       let targets = this.loadLevelOneGrid()\n       this.setState({\n           targets: targets\n       })\n    }\n    \n    shuffleGrid = (array) => {\n        let newArr = [];\n        // while(newArr.length < array.length){\n        //     let x = array[Math.floor(Math.random() * array.length)]\n        //     if (!newArr.includes(x)){\n        //         newArr.push(x)\n\n        //     }\n        // }\n        // for(let i = array.length-1; i > 0; i--){\n        //     let j = await(Math.floor(Math.random() *(i+1)))\n        //     [array[i], array[j]] = [array[j], array[i]]\n        // }\n        let currentIndex = array.length, temp, random;\n        while(0 !== currentIndex){\n            random = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temp=array[currentIndex];\n            array[currentIndex] = array\n        }\n        return newArr\n    }\n\n    render() {\n        if (this.state.targets === null){\n            return <h1>LOADING!</h1>\n        }\n        return (\n            <div className='tile-grid-container'>\n                <div className='tile-grid'>\n                    {this.state.targets.map((tile, i) => <Tiles key={i}{...tile}/>)}\n                </div>\n            </div>\n        )\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}