{"ast":null,"code":"var _jsxFileName = \"/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/BossFightContainer.js\";\nimport React, { Component } from 'react';\nimport FlipMove from 'react-flip-move';\nimport Targets from '../Components/Targets';\nimport LevelEnd from '../Components/LevelEnd';\nimport friendlySmall from '../Assets/FriendlySmall.png';\nimport friendlyStrike from '../Assets/FriendlyStrike.png';\nimport healthFull from '../Assets/HealthFull.png';\nimport health3 from '../Assets/Health3.png';\nimport health2 from '../Assets/Health2.png';\nimport health1 from '../Assets/Health1.png';\nimport healthEmpty from '../Assets/HealthEmpty.png';\nimport bossMusic from '../Assets/Audio/bossMusic.mp3';\nlet music;\nexport default class BossFightContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedLevel: this.props.selectedLevel,\n      //this should hold all info the container needs to render this level\n      blasterPower: this.props.blasterPower + 20,\n      health: this.props.health,\n      maxHealth: this.props.maxHealth,\n      targets: null,\n      boss: {\n        name: 'Boss',\n        target_type: 'boss',\n        isClicked: 100\n      },\n      counter: 0,\n      isClicked: 0,\n      levelPoints: 0,\n      bossHealth: 100,\n      defensesDestroyed: 0,\n      success: false,\n      levelEnd: false,\n      firendlyBackgroundColor: '#18FCFF',\n      debrisBackgroundColor: '#0B162A',\n      hitFriendlyCount: 0,\n      bossView: false,\n      gameComplete: false\n    };\n\n    this.componentDidMount = () => {\n      music = new Audio(bossMusic);\n      this.state.bossView ? this.runBoss() : this.runGame();\n    };\n\n    this.handleClick = (name, target_type) => {\n      console.log(this.state.blasterPower); //finds the target that was clicked\n\n      let thisTarget = this.state.targets.find(target => target.name === name); //conditional for responding to target type\n\n      if (target_type !== 'asteroid') {\n        if (thisTarget.isClicked === 0) {\n          thisTarget.isClicked = 1;\n\n          if (target_type === 'bomb') {\n            this.setState({\n              isClicked: 1,\n              health: this.state.health - 1\n            });\n          }\n\n          if (target_type === 'friendly') {\n            this.setState({\n              isClicked: 1,\n              levelPoints: this.state.levelPoints - 2,\n              hitFriendlyCount: this.state.hitFriendlyCount + 1\n            });\n          }\n        }\n      } else if (target_type === 'asteroid') {\n        if (thisTarget.isClicked < 2) {\n          thisTarget.isClicked += this.state.blasterPower;\n          this.setState({\n            isClicked: this.state.isClicked + this.state.blasterPower\n          });\n\n          if (thisTarget.isClicked >= 2) {\n            this.setState({\n              levelPoints: this.state.levelPoints + 3,\n              defensesDestroyed: this.state.defensesDestroyed + 1\n            });\n          }\n        }\n      }\n    };\n\n    this.handleBossClick = name => {\n      let thisTarget = this.state.boss; // can probably just be an object, not an array with one object in it ...\n\n      console.log(this.state.bossHealth);\n\n      if (thisTarget.isClicked > 0) {\n        thisTarget.isClicked -= this.state.blasterPower;\n        this.setState({\n          bossHealth: this.state.bossHealth - this.state.blasterPower\n        });\n\n        if (thisTarget.isClicked <= 0) {\n          this.setState({\n            levelPoints: this.state.levelPoints + 1000\n          });\n        }\n      }\n    };\n\n    this.resetTargets = () => {\n      let targetsCopy = [...this.state.targets];\n\n      for (const target of targetsCopy) {\n        target.isClicked = 0;\n      }\n    };\n\n    this.establishTargets = string => {\n      let targets = [];\n      let targetArray = string.split('');\n\n      for (let i = 0; i < targetArray.length; i++) {\n        if (targetArray[i] === '1') {\n          targets.push({\n            name: i,\n            target_type: 'friendly',\n            isClicked: 0\n          });\n        } else if (targetArray[i] === '2') {\n          targets.push({\n            name: i,\n            target_type: 'bomb',\n            isClicked: 0\n          });\n        } else if (targetArray[i] === '3') {\n          targets.push({\n            name: i,\n            target_type: 'asteroid',\n            isClicked: 0\n          });\n        }\n      }\n\n      this.setState({\n        targets: targets\n      });\n    };\n\n    this.loadLevelGrid = () => {\n      this.setState({\n        targets: this.shuffleGrid(this.state.targets)\n      });\n    };\n\n    this.shuffleGrid = array => {\n      let currentIndex = array.length,\n          temp,\n          random;\n\n      while (0 !== currentIndex) {\n        random = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temp = array[currentIndex];\n        array[currentIndex] = array[random];\n        array[random] = temp;\n      }\n\n      return array;\n    };\n\n    this.renderTargets = () => {\n      return React.createElement(FlipMove, {\n        staggerDelayBy: 100,\n        appearAnimation: \"elevator\",\n        enterAnimation: \"fade\",\n        leaveAnimation: \"fade\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, this.state.targets.map(target => React.createElement(Targets, Object.assign({\n        handleClick: this.handleClick,\n        key: target.name\n      }, target, {\n        friendlyBackgroundColor: this.state.friendlyBackgroundColor,\n        debrisBackgroundColor: this.state.debrisBackgroundColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }))));\n    };\n\n    this.playMusic = () => {\n      music.play();\n      music.loop = true;\n    };\n\n    this.stopMusic = () => {\n      music.pause();\n      music.currentTime = 0.0;\n    };\n\n    this.getHealth = () => {\n      if (this.state.health === this.state.maxHealth) {\n        return healthFull;\n      } else if (this.state.health >= this.state.maxHealth * 0.75 && this.state.health < this.state.maxHealth) {\n        return health3;\n      } else if (this.state.health >= this.state.maxHealth * 0.5 && this.state.health < this.state.maxHealth * 0.75) {\n        return health2;\n      } else if (this.state.health > 0 && this.state.health < this.state.maxHealth * 0.5) {\n        return health1;\n      } else {\n        return healthEmpty;\n      }\n    };\n\n    this.runGame = () => {\n      this.playMusic(); //debris game loop\n\n      if (this.state.targets === null) {\n        this.establishTargets(this.state.selectedLevel.targetString);\n      }\n\n      this.runLoop();\n    };\n\n    this.runLoop = () => {\n      var gameLoop = setInterval(() => {\n        this.resetTargets();\n        this.loadLevelGrid(); //conditions for debris loop ending\n\n        if (this.state.defensesDestroyed >= 12) {\n          this.setState({\n            bossView: true,\n            defensesDestroyed: 0\n          });\n          this.runBoss();\n        }\n\n        if (this.state.bossHealth <= 0) {\n          clearInterval(gameLoop);\n          this.setState({\n            success: true,\n            gameComplete: true,\n            levelEnd: true\n          });\n        } //leaving first two conditions for weakened boss mode stretch goal\n        else if (this.state.levelPoints < 0 || this.state.hitFriendlyCount === 3 || this.state.health === 0) {\n            clearInterval(gameLoop);\n            this.stopMusic();\n            this.setState({\n              levelEnd: true\n            });\n          }\n      }, 2000);\n    };\n\n    this.runBoss = () => {\n      var bossLoop = setInterval(() => {\n        this.setState({\n          counter: this.state.counter + 1\n        });\n\n        if (this.state.bossHealth < 50 && this.state.bossHealth > 35) {\n          clearInterval(bossLoop);\n          this.establishTargets('111122233');\n          this.setState({\n            bossView: false\n          });\n        }\n\n        if (this.state.counter % 2 === 0) {\n          this.setState({\n            bossView: false\n          });\n          clearInterval(bossLoop);\n        }\n      }, 2000);\n    };\n\n    this.renderBoss = () => {\n      return React.createElement(Targets, Object.assign({}, this.state.boss, {\n        handleBossClick: this.handleBossClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }));\n    };\n  }\n\n  render() {\n    if (this.state.targets === null) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, \"LOADING!\");\n    }\n\n    if (this.state.levelEnd) {\n      return React.createElement(\"div\", {\n        className: this.props.selectedLevel.css,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, React.createElement(LevelEnd, {\n        music: this,\n        totalPoints: this.props.totalPoints,\n        gameComplete: this.state.gameComplete,\n        health: this.state.health,\n        success: this.state.success,\n        levelPoints: this.state.levelPoints,\n        levelEnd: this.state.levelEnd,\n        levelComplete: this.props.levelComplete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        className: this.props.selectedLevel.css,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"level-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"health-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"health-img\",\n        src: this.getHealth(),\n        alt: \"health meter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"game-play-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"tile-grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"tile-grid\",\n        style: {\n          display: this.state.bossView ? 'none' : 'block'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, this.renderTargets()), React.createElement(\"div\", {\n        className: \"tile-grid\",\n        style: {\n          display: this.state.bossView ? 'block' : 'none'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, this.renderBoss())))), React.createElement(\"div\", {\n        className: \"score-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"strikes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"strikes-tile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"stikes-img\",\n        src: this.state.hitFriendlyCount >= 1 ? friendlyStrike : friendlySmall,\n        alt: \"alien strikes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"strikes-tile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"stikes-img\",\n        src: this.state.hitFriendlyCount >= 2 ? friendlyStrike : friendlySmall,\n        alt: \"alien strikes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"strikes-tile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"stikes-img\",\n        src: this.state.hitFriendlyCount === 3 ? friendlyStrike : friendlySmall,\n        alt: \"alien strikes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"level-score\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          color: 'whitesmoke',\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, this.state.bossView ? 'Boss Health: ' + this.state.bossHealth : 'Score:' + this.state.levelPoints))));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/BossFightContainer.js"],"names":["React","Component","FlipMove","Targets","LevelEnd","friendlySmall","friendlyStrike","healthFull","health3","health2","health1","healthEmpty","bossMusic","music","BossFightContainer","state","selectedLevel","props","blasterPower","health","maxHealth","targets","boss","name","target_type","isClicked","counter","levelPoints","bossHealth","defensesDestroyed","success","levelEnd","firendlyBackgroundColor","debrisBackgroundColor","hitFriendlyCount","bossView","gameComplete","componentDidMount","Audio","runBoss","runGame","handleClick","console","log","thisTarget","find","target","setState","handleBossClick","resetTargets","targetsCopy","establishTargets","string","targetArray","split","i","length","push","loadLevelGrid","shuffleGrid","array","currentIndex","temp","random","Math","floor","renderTargets","map","friendlyBackgroundColor","playMusic","play","loop","stopMusic","pause","currentTime","getHealth","targetString","runLoop","gameLoop","setInterval","clearInterval","bossLoop","renderBoss","render","css","totalPoints","levelComplete","display","color","textAlign"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,IAAIC,KAAJ;AAGA,eAAe,MAAMC,kBAAN,SAAiCb,SAAjC,CAA0C;AAAA;AAAA;AAAA,SAIrDc,KAJqD,GAI7C;AACJC,MAAAA,aAAa,EAAE,KAAKC,KAAL,CAAWD,aADtB;AACqC;AACzCE,MAAAA,YAAY,EAAE,KAAKD,KAAL,CAAWC,YAAX,GAAyB,EAFnC;AAGJC,MAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWE,MAHf;AAIJC,MAAAA,SAAS,EAAE,KAAKH,KAAL,CAAWG,SAJlB;AAKJC,MAAAA,OAAO,EAAE,IALL;AAMJC,MAAAA,IAAI,EAAE;AAACC,QAAAA,IAAI,EAAE,MAAP;AAAeC,QAAAA,WAAW,EAAE,MAA5B;AAAoCC,QAAAA,SAAS,EAAE;AAA/C,OANF;AAOJC,MAAAA,OAAO,EAAE,CAPL;AAQJD,MAAAA,SAAS,EAAE,CARP;AASJE,MAAAA,WAAW,EAAE,CATT;AAUJC,MAAAA,UAAU,EAAE,GAVR;AAWJC,MAAAA,iBAAiB,EAAE,CAXf;AAYJC,MAAAA,OAAO,EAAE,KAZL;AAaJC,MAAAA,QAAQ,EAAE,KAbN;AAcJC,MAAAA,uBAAuB,EAAE,SAdrB;AAeJC,MAAAA,qBAAqB,EAAE,SAfnB;AAgBJC,MAAAA,gBAAgB,EAAE,CAhBd;AAiBJC,MAAAA,QAAQ,EAAE,KAjBN;AAkBJC,MAAAA,YAAY,EAAE;AAlBV,KAJ6C;;AAAA,SA2BrDC,iBA3BqD,GA2BjC,MAAM;AACtBxB,MAAAA,KAAK,GAAG,IAAIyB,KAAJ,CAAU1B,SAAV,CAAR;AACA,WAAKG,KAAL,CAAWoB,QAAX,GAAsB,KAAKI,OAAL,EAAtB,GAAuC,KAAKC,OAAL,EAAvC;AACH,KA9BoD;;AAAA,SAiCrDC,WAjCqD,GAiCvC,CAAClB,IAAD,EAAOC,WAAP,KAAuB;AACjCkB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK5B,KAAL,CAAWG,YAAvB,EADiC,CAEjC;;AACA,UAAI0B,UAAU,GAAG,KAAK7B,KAAL,CAAWM,OAAX,CAAmBwB,IAAnB,CAAwBC,MAAM,IAAIA,MAAM,CAACvB,IAAP,KAAgBA,IAAlD,CAAjB,CAHiC,CAIjC;;AACA,UAAGC,WAAW,KAAK,UAAnB,EAA8B;AAC1B,YAAGoB,UAAU,CAACnB,SAAX,KAAyB,CAA5B,EAA8B;AAC1BmB,UAAAA,UAAU,CAACnB,SAAX,GAAuB,CAAvB;;AACA,cAAGD,WAAW,KAAK,MAAnB,EAA0B;AACtB,iBAAKuB,QAAL,CAAc;AACVtB,cAAAA,SAAS,EAAE,CADD;AAEVN,cAAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWI,MAAX,GAAkB;AAFhB,aAAd;AAIH;;AACD,cAAGK,WAAW,KAAK,UAAnB,EAA8B;AAC1B,iBAAKuB,QAAL,CAAc;AACVtB,cAAAA,SAAS,EAAE,CADD;AAEVE,cAAAA,WAAW,EAAE,KAAKZ,KAAL,CAAWY,WAAX,GAAuB,CAF1B;AAGVO,cAAAA,gBAAgB,EAAE,KAAKnB,KAAL,CAAWmB,gBAAX,GAA4B;AAHpC,aAAd;AAKH;AACJ;AACJ,OAjBD,MAkBK,IAAGV,WAAW,KAAK,UAAnB,EAA8B;AAC/B,YAAGoB,UAAU,CAACnB,SAAX,GAAuB,CAA1B,EAA4B;AACxBmB,UAAAA,UAAU,CAACnB,SAAX,IAAwB,KAAKV,KAAL,CAAWG,YAAnC;AACA,eAAK6B,QAAL,CAAc;AACVtB,YAAAA,SAAS,EAAE,KAAKV,KAAL,CAAWU,SAAX,GAAuB,KAAKV,KAAL,CAAWG;AADnC,WAAd;;AAGA,cAAG0B,UAAU,CAACnB,SAAX,IAAwB,CAA3B,EAA6B;AACzB,iBAAKsB,QAAL,CAAc;AACVpB,cAAAA,WAAW,EAAE,KAAKZ,KAAL,CAAWY,WAAX,GAAuB,CAD1B;AAEVE,cAAAA,iBAAiB,EAAE,KAAKd,KAAL,CAAWc,iBAAX,GAA6B;AAFtC,aAAd;AAIH;AACJ;AACJ;AACJ,KAtEoD;;AAAA,SAwErDmB,eAxEqD,GAwElCzB,IAAD,IAAU;AACxB,UAAIqB,UAAU,GAAG,KAAK7B,KAAL,CAAWO,IAA5B,CADwB,CACS;;AACjCoB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK5B,KAAL,CAAWa,UAAvB;;AACA,UAAGgB,UAAU,CAACnB,SAAX,GAAuB,CAA1B,EAA4B;AACxBmB,QAAAA,UAAU,CAACnB,SAAX,IAAwB,KAAKV,KAAL,CAAWG,YAAnC;AACA,aAAK6B,QAAL,CAAc;AACVnB,UAAAA,UAAU,EAAE,KAAKb,KAAL,CAAWa,UAAX,GAAwB,KAAKb,KAAL,CAAWG;AADrC,SAAd;;AAGA,YAAG0B,UAAU,CAACnB,SAAX,IAAwB,CAA3B,EAA6B;AACzB,eAAKsB,QAAL,CAAc;AACVpB,YAAAA,WAAW,EAAE,KAAKZ,KAAL,CAAWY,WAAX,GAAuB;AAD1B,WAAd;AAGH;AACJ;AACJ,KAtFoD;;AAAA,SAyFrDsB,YAzFqD,GAyFtC,MAAM;AACjB,UAAIC,WAAW,GAAG,CAAC,GAAG,KAAKnC,KAAL,CAAWM,OAAf,CAAlB;;AACA,WAAI,MAAMyB,MAAV,IAAoBI,WAApB,EAAgC;AAC5BJ,QAAAA,MAAM,CAACrB,SAAP,GAAmB,CAAnB;AACH;AACJ,KA9FoD;;AAAA,SAgGrD0B,gBAhGqD,GAgGjCC,MAAD,IAAY;AAE3B,UAAI/B,OAAO,GAAG,EAAd;AACA,UAAIgC,WAAW,GAAGD,MAAM,CAACE,KAAP,CAAa,EAAb,CAAlB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,CAAC,EAAzC,EAA4C;AACxC,YAAGF,WAAW,CAACE,CAAD,CAAX,KAAmB,GAAtB,EAA0B;AACtBlC,UAAAA,OAAO,CAACoC,IAAR,CAAa;AAAClC,YAAAA,IAAI,EAAEgC,CAAP;AAAU/B,YAAAA,WAAW,EAAE,UAAvB;AAAmCC,YAAAA,SAAS,EAAE;AAA9C,WAAb;AACH,SAFD,MAGK,IAAG4B,WAAW,CAACE,CAAD,CAAX,KAAmB,GAAtB,EAA0B;AAC3BlC,UAAAA,OAAO,CAACoC,IAAR,CAAa;AAAClC,YAAAA,IAAI,EAAEgC,CAAP;AAAU/B,YAAAA,WAAW,EAAE,MAAvB;AAA+BC,YAAAA,SAAS,EAAE;AAA1C,WAAb;AACH,SAFI,MAGA,IAAG4B,WAAW,CAACE,CAAD,CAAX,KAAmB,GAAtB,EAA0B;AAC3BlC,UAAAA,OAAO,CAACoC,IAAR,CAAa;AAAClC,YAAAA,IAAI,EAAEgC,CAAP;AAAU/B,YAAAA,WAAW,EAAE,UAAvB;AAAmCC,YAAAA,SAAS,EAAE;AAA9C,WAAb;AACH;AACJ;;AACD,WAAKsB,QAAL,CAAc;AACV1B,QAAAA,OAAO,EAAEA;AADC,OAAd;AAGH,KAlHoD;;AAAA,SAqHrDqC,aArHqD,GAqHrC,MAAM;AAClB,WAAKX,QAAL,CAAc;AACV1B,QAAAA,OAAO,EAAE,KAAKsC,WAAL,CAAiB,KAAK5C,KAAL,CAAWM,OAA5B;AADC,OAAd;AAGH,KAzHoD;;AAAA,SA4HrDsC,WA5HqD,GA4HtCC,KAAD,IAAW;AACrB,UAAIC,YAAY,GAAGD,KAAK,CAACJ,MAAzB;AAAA,UAAiCM,IAAjC;AAAA,UAAuCC,MAAvC;;AACA,aAAM,MAAMF,YAAZ,EAAyB;AACrBE,QAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgBF,YAA3B,CAAT;AACAA,QAAAA,YAAY,IAAI,CAAhB;AACAC,QAAAA,IAAI,GAAGF,KAAK,CAACC,YAAD,CAAZ;AACAD,QAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACG,MAAD,CAA3B;AACAH,QAAAA,KAAK,CAACG,MAAD,CAAL,GAAgBD,IAAhB;AACH;;AACD,aAAOF,KAAP;AACH,KAtIoD;;AAAA,SAyIrDM,aAzIqD,GAyIrC,MAAM;AAElB,aAAO,oBAAC,QAAD;AACP,QAAA,cAAc,EAAE,GADT;AAEP,QAAA,eAAe,EAAC,UAFT;AAGP,QAAA,cAAc,EAAC,MAHR;AAIP,QAAA,cAAc,EAAC,MAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMN,KAAKnD,KAAL,CAAWM,OAAX,CAAmB8C,GAAnB,CAAuBrB,MAAM,IAAI,oBAAC,OAAD;AAClC,QAAA,WAAW,EAAE,KAAKL,WADgB;AACH,QAAA,GAAG,EAAEK,MAAM,CAACvB;AADT,SACkBuB,MADlB;AAElC,QAAA,uBAAuB,EAAE,KAAK/B,KAAL,CAAWqD,uBAFF;AAGlC,QAAA,qBAAqB,EAAE,KAAKrD,KAAL,CAAWkB,qBAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAjC,CANM,CAAP;AAYH,KAvJoD;;AAAA,SAwJrDoC,SAxJqD,GAwJzC,MAAM;AACdxD,MAAAA,KAAK,CAACyD,IAAN;AACAzD,MAAAA,KAAK,CAAC0D,IAAN,GAAW,IAAX;AACH,KA3JoD;;AAAA,SA6JrDC,SA7JqD,GA6JzC,MAAM;AACd3D,MAAAA,KAAK,CAAC4D,KAAN;AACA5D,MAAAA,KAAK,CAAC6D,WAAN,GAAoB,GAApB;AACH,KAhKoD;;AAAA,SAkKrDC,SAlKqD,GAkKzC,MAAM;AACd,UAAG,KAAK5D,KAAL,CAAWI,MAAX,KAAsB,KAAKJ,KAAL,CAAWK,SAApC,EAA8C;AAC1C,eAAOb,UAAP;AACH,OAFD,MAGK,IAAI,KAAKQ,KAAL,CAAWI,MAAX,IAAsB,KAAKJ,KAAL,CAAWK,SAAX,GAAuB,IAA7C,IAAsD,KAAKL,KAAL,CAAWI,MAAX,GAAqB,KAAKJ,KAAL,CAAWK,SAA1F,EAAqG;AACtG,eAAOZ,OAAP;AACH,OAFI,MAGA,IAAG,KAAKO,KAAL,CAAWI,MAAX,IAAsB,KAAKJ,KAAL,CAAWK,SAAX,GAAuB,GAA7C,IAAqD,KAAKL,KAAL,CAAWI,MAAX,GAAqB,KAAKJ,KAAL,CAAWK,SAAX,GAAuB,IAApG,EAA0G;AAC3G,eAAOX,OAAP;AACH,OAFI,MAGA,IAAI,KAAKM,KAAL,CAAWI,MAAX,GAAoB,CAApB,IAAyB,KAAKJ,KAAL,CAAWI,MAAX,GAAqB,KAAKJ,KAAL,CAAWK,SAAX,GAAuB,GAAzE,EAA8E;AAC/E,eAAOV,OAAP;AACH,OAFI,MAGD;AACA,eAAOC,WAAP;AACH;AACJ,KAlLoD;;AAAA,SAoLrD6B,OApLqD,GAoL3C,MAAM;AACZ,WAAK6B,SAAL,GADY,CAEZ;;AACA,UAAG,KAAKtD,KAAL,CAAWM,OAAX,KAAuB,IAA1B,EAA+B;AAC3B,aAAK8B,gBAAL,CAAsB,KAAKpC,KAAL,CAAWC,aAAX,CAAyB4D,YAA/C;AACH;;AACD,WAAKC,OAAL;AACH,KA3LoD;;AAAA,SA4LrDA,OA5LqD,GA4L3C,MAAM;AACZ,UAAIC,QAAQ,GAAGC,WAAW,CAAC,MAAK;AAC5B,aAAK9B,YAAL;AACA,aAAKS,aAAL,GAF4B,CAG5B;;AACA,YAAG,KAAK3C,KAAL,CAAWc,iBAAX,IAAgC,EAAnC,EAAsC;AAClC,eAAKkB,QAAL,CAAc;AACVZ,YAAAA,QAAQ,EAAE,IADA;AAEVN,YAAAA,iBAAiB,EAAE;AAFT,WAAd;AAIA,eAAKU,OAAL;AACH;;AACD,YAAG,KAAKxB,KAAL,CAAWa,UAAX,IAAyB,CAA5B,EAA8B;AAC1BoD,UAAAA,aAAa,CAACF,QAAD,CAAb;AACA,eAAK/B,QAAL,CAAc;AACVjB,YAAAA,OAAO,EAAE,IADC;AAEVM,YAAAA,YAAY,EAAE,IAFJ;AAGVL,YAAAA,QAAQ,EAAE;AAHA,WAAd;AAKH,SAPD,CAQA;AARA,aASK,IAAG,KAAKhB,KAAL,CAAWY,WAAX,GAAyB,CAAzB,IAA8B,KAAKZ,KAAL,CAAWmB,gBAAX,KAAgC,CAA9D,IACD,KAAKnB,KAAL,CAAWI,MAAX,KAAsB,CADxB,EAC0B;AAC3B6D,YAAAA,aAAa,CAACF,QAAD,CAAb;AACA,iBAAKN,SAAL;AACA,iBAAKzB,QAAL,CAAc;AACVhB,cAAAA,QAAQ,EAAE;AADA,aAAd;AAGH;AACJ,OA5ByB,EA4BvB,IA5BuB,CAA1B;AA6BH,KA1NoD;;AAAA,SA+NrDQ,OA/NqD,GA+N3C,MAAM;AACZ,UAAI0C,QAAQ,GAAGF,WAAW,CAAC,MAAM;AAC7B,aAAKhC,QAAL,CAAc;AACVrB,UAAAA,OAAO,EAAE,KAAKX,KAAL,CAAWW,OAAX,GAAmB;AADlB,SAAd;;AAGA,YAAG,KAAKX,KAAL,CAAWa,UAAX,GAAwB,EAAxB,IAA8B,KAAKb,KAAL,CAAWa,UAAX,GAAwB,EAAzD,EAA4D;AACxDoD,UAAAA,aAAa,CAACC,QAAD,CAAb;AACA,eAAK9B,gBAAL,CAAsB,WAAtB;AACA,eAAKJ,QAAL,CAAc;AACVZ,YAAAA,QAAQ,EAAE;AADA,WAAd;AAGH;;AACD,YAAG,KAAKpB,KAAL,CAAWW,OAAX,GAAqB,CAArB,KAA2B,CAA9B,EAAgC;AAC5B,eAAKqB,QAAL,CAAc;AACVZ,YAAAA,QAAQ,EAAE;AADA,WAAd;AAGA6C,UAAAA,aAAa,CAACC,QAAD,CAAb;AAEH;AACJ,OAlByB,EAkBvB,IAlBuB,CAA1B;AAmBH,KAnPoD;;AAAA,SAoPrDC,UApPqD,GAoPxC,MAAM;AACf,aACA,oBAAC,OAAD,oBACI,KAAKnE,KAAL,CAAWO,IADf;AAEA,QAAA,eAAe,EAAE,KAAK0B,eAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADA;AAMH,KA3PoD;AAAA;;AA6PrDmC,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKpE,KAAL,CAAWM,OAAX,KAAuB,IAA3B,EAAgC;AAC5B,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH;;AACD,QAAI,KAAKN,KAAL,CAAWgB,QAAf,EAAwB;AACpB,aACI;AAAK,QAAA,SAAS,EAAE,KAAKd,KAAL,CAAWD,aAAX,CAAyBoE,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AACA,QAAA,KAAK,EAAE,IADP;AAEA,QAAA,WAAW,EAAE,KAAKnE,KAAL,CAAWoE,WAFxB;AAGA,QAAA,YAAY,EAAE,KAAKtE,KAAL,CAAWqB,YAHzB;AAIA,QAAA,MAAM,EAAE,KAAKrB,KAAL,CAAWI,MAJnB;AAKA,QAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWe,OALpB;AAMA,QAAA,WAAW,EAAE,KAAKf,KAAL,CAAWY,WANxB;AAOA,QAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAWgB,QAPrB;AAQA,QAAA,aAAa,EAAE,KAAKd,KAAL,CAAWqE,aAR1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAcH,KAfD,MAgBK;AAED,aACI;AAAK,QAAA,SAAS,EAAE,KAAKrE,KAAL,CAAWD,aAAX,CAAyBoE,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,GAAG,EAAE,KAAKT,SAAL,EAAjC;AAAmD,QAAA,GAAG,EAAC,cAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAII;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,KAAK,EAAE;AAACY,UAAAA,OAAO,EAAE,KAAKxE,KAAL,CAAWoB,QAAX,GAAsB,MAAtB,GAA+B;AAAzC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK+B,aAAL,EADL,CADJ,EAII;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,KAAK,EAAE;AAACqB,UAAAA,OAAO,EAAE,KAAKxE,KAAL,CAAWoB,QAAX,GAAsB,OAAtB,GAAgC;AAA1C,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK+C,UAAL,EADL,CAJJ,CADJ,CAJJ,CADJ,EAiBI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,GAAG,EAAE,KAAKnE,KAAL,CAAWmB,gBAAX,IAA+B,CAA/B,GAAmC5B,cAAnC,GAAoDD,aAArF;AAAoG,QAAA,GAAG,EAAC,eAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAII;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,GAAG,EAAE,KAAKU,KAAL,CAAWmB,gBAAX,IAA+B,CAA/B,GAAmC5B,cAAnC,GAAoDD,aAArF;AAAoG,QAAA,GAAG,EAAC,eAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAJJ,EAOI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,GAAG,EAAE,KAAKU,KAAL,CAAWmB,gBAAX,KAAgC,CAAhC,GAAoC5B,cAApC,GAAqDD,aAAtF;AAAqG,QAAA,GAAG,EAAC,eAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAPJ,CADA,EAYI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,KAAK,EAAE;AAACmF,UAAAA,KAAK,EAAC,YAAP;AAAqBC,UAAAA,SAAS,EAAE;AAAhC,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK1E,KAAL,CAAWoB,QAAX,GAAsB,kBAAkB,KAAKpB,KAAL,CAAWa,UAAnD,GAAgE,WAAW,KAAKb,KAAL,CAAWY,WAD3F,CADJ,CAZJ,CAjBJ,CADJ;AAsCH;AACJ;;AA1ToD","sourcesContent":["import React, { Component } from 'react'\nimport FlipMove from 'react-flip-move'\nimport Targets from '../Components/Targets'\nimport LevelEnd from '../Components/LevelEnd'\nimport friendlySmall from '../Assets/FriendlySmall.png'\nimport friendlyStrike from '../Assets/FriendlyStrike.png'\nimport healthFull from '../Assets/HealthFull.png'\nimport health3 from '../Assets/Health3.png'\nimport health2 from '../Assets/Health2.png'\nimport health1 from '../Assets/Health1.png'\nimport healthEmpty from '../Assets/HealthEmpty.png'\nimport bossMusic from '../Assets/Audio/bossMusic.mp3'\nlet music;\n\n\nexport default class BossFightContainer extends Component{\n\n    //refactor later to use a switch statement to run through these functions based on which level is selected\n\n    state = {\n        selectedLevel: this.props.selectedLevel, //this should hold all info the container needs to render this level\n        blasterPower: this.props.blasterPower +20,\n        health: this.props.health,\n        maxHealth: this.props.maxHealth,\n        targets: null,\n        boss: {name: 'Boss', target_type: 'boss', isClicked: 100},\n        counter: 0,\n        isClicked: 0,\n        levelPoints: 0,\n        bossHealth: 100,\n        defensesDestroyed: 0,\n        success: false,\n        levelEnd: false,\n        firendlyBackgroundColor: '#18FCFF',\n        debrisBackgroundColor: '#0B162A',\n        hitFriendlyCount: 0,\n        bossView: false,\n        gameComplete: false\n    }\n    \n\n    //loads everything and holds setInterval loops\n    componentDidMount = () => {\n        music = new Audio(bossMusic)\n        this.state.bossView ? this.runBoss() : this.runGame();    \n    }\n\n    //function for handling target clicks\n    handleClick = (name, target_type) => {\n        console.log(this.state.blasterPower)\n        //finds the target that was clicked\n        let thisTarget = this.state.targets.find(target => target.name === name)  \n        //conditional for responding to target type\n        if(target_type !== 'asteroid'){\n            if(thisTarget.isClicked === 0){\n                thisTarget.isClicked = 1\n                if(target_type === 'bomb'){\n                    this.setState({\n                        isClicked: 1,\n                        health: this.state.health-1\n                        })\n                }\n                if(target_type === 'friendly'){\n                    this.setState({\n                        isClicked: 1,\n                        levelPoints: this.state.levelPoints-2,\n                        hitFriendlyCount: this.state.hitFriendlyCount+1\n                    })\n                }\n            }\n        }\n        else if(target_type === 'asteroid'){\n            if(thisTarget.isClicked < 2){\n                thisTarget.isClicked += this.state.blasterPower;\n                this.setState({\n                    isClicked: this.state.isClicked + this.state.blasterPower\n                })\n                if(thisTarget.isClicked >= 2){\n                    this.setState({\n                        levelPoints: this.state.levelPoints+3,\n                        defensesDestroyed: this.state.defensesDestroyed+1\n                    })\n                }\n            }        \n        }\n    }\n\n    handleBossClick = (name) => {\n        let thisTarget = this.state.boss // can probably just be an object, not an array with one object in it ...\n        console.log(this.state.bossHealth)\n        if(thisTarget.isClicked > 0){\n            thisTarget.isClicked -= this.state.blasterPower;\n            this.setState({\n                bossHealth: this.state.bossHealth - this.state.blasterPower\n            })\n            if(thisTarget.isClicked <= 0){\n                this.setState({\n                    levelPoints: this.state.levelPoints+1000\n                })\n            }\n        }\n    }\n\n    // resets the state for targets, used for setInterval loop\n    resetTargets = () => {\n        let targetsCopy = [...this.state.targets];\n        for(const target of targetsCopy){\n            target.isClicked = 0\n        }\n    }\n    //translates targetString into objects\n    establishTargets = (string) => {\n        \n        let targets = [];\n        let targetArray = string.split('');\n        for (let i = 0; i < targetArray.length; i++){\n            if(targetArray[i] === '1'){\n                targets.push({name: i, target_type: 'friendly', isClicked: 0})\n            }\n            else if(targetArray[i] === '2'){\n                targets.push({name: i, target_type: 'bomb', isClicked: 0})\n            }\n            else if(targetArray[i] === '3'){\n                targets.push({name: i, target_type: 'asteroid', isClicked: 0})\n            }\n        }\n        this.setState({\n            targets: targets\n        })\n    }\n  \n    //load the targets\n    loadLevelGrid = () => {\n        this.setState({\n            targets: this.shuffleGrid(this.state.targets)\n        })\n    }\n\n    //shuffles the targets for loading\n    shuffleGrid = (array) => {\n        let currentIndex = array.length, temp, random;\n        while(0 !== currentIndex){\n            random = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temp = array[currentIndex];\n            array[currentIndex] = array[random];\n            array[random] = temp;\n        }\n        return array\n    }\n\n    // passes the targets to the Target component\n    renderTargets = () => {\n        \n        return <FlipMove\n        staggerDelayBy={100}\n        appearAnimation=\"elevator\"\n        enterAnimation=\"fade\"\n        leaveAnimation=\"fade\"\n        >\n        {this.state.targets.map(target => <Targets \n        handleClick={this.handleClick} key={target.name}{...target}\n        friendlyBackgroundColor={this.state.friendlyBackgroundColor}\n        debrisBackgroundColor={this.state.debrisBackgroundColor}\n        />)}\n        </FlipMove>\n    }\n    playMusic = () => {\n        music.play();\n        music.loop=true;\n    }\n\n    stopMusic = () => {\n        music.pause();\n        music.currentTime = 0.0;\n    }\n\n    getHealth = () => {\n        if(this.state.health === this.state.maxHealth){\n            return healthFull;\n        }\n        else if (this.state.health >= (this.state.maxHealth * 0.75) && this.state.health < (this.state.maxHealth)){\n            return health3;\n        }\n        else if(this.state.health >= (this.state.maxHealth * 0.5) && this.state.health < (this.state.maxHealth * 0.75)){\n            return health2;\n        }\n        else if (this.state.health > 0 && this.state.health < (this.state.maxHealth * 0.5)){\n            return health1;\n        }\n        else{\n            return healthEmpty;\n        }\n    }\n\n    runGame = () => {\n        this.playMusic();\n        //debris game loop\n        if(this.state.targets === null){\n            this.establishTargets(this.state.selectedLevel.targetString)\n        }\n        this.runLoop()\n    }\n    runLoop = () => {\n        var gameLoop = setInterval(() =>{\n            this.resetTargets()\n            this.loadLevelGrid()\n            //conditions for debris loop ending\n            if(this.state.defensesDestroyed >= 12){ \n                this.setState({\n                    bossView: true,\n                    defensesDestroyed: 0\n                })\n                this.runBoss();\n            }\n            if(this.state.bossHealth <= 0){\n                clearInterval(gameLoop)\n                this.setState({\n                    success: true,\n                    gameComplete: true,\n                    levelEnd: true\n                })\n            }\n            //leaving first two conditions for weakened boss mode stretch goal\n            else if(this.state.levelPoints < 0 || this.state.hitFriendlyCount === 3\n                || this.state.health === 0){\n                clearInterval(gameLoop)\n                this.stopMusic()\n                this.setState({\n                    levelEnd: true\n                })\n            }\n        }, 2000)\n    }\n    \n\n    \n    // Function for displaying boss on screen\n    runBoss = () => {\n        var bossLoop = setInterval(() => {\n            this.setState({\n                counter: this.state.counter+1\n            })\n            if(this.state.bossHealth < 50 && this.state.bossHealth > 35){\n                clearInterval(bossLoop)\n                this.establishTargets('111122233')\n                this.setState({\n                    bossView: false\n                })\n            }\n            if(this.state.counter % 2 === 0){\n                this.setState({\n                    bossView: false\n                })\n                clearInterval(bossLoop)\n\n            }\n        }, 2000)\n    }\n    renderBoss = () => {\n        return (\n        <Targets \n        {...this.state.boss}\n        handleBossClick={this.handleBossClick} \n        />)\n        \n    }\n\n    render() {\n        if (this.state.targets === null){\n            return <h1>LOADING!</h1>\n        }\n        if (this.state.levelEnd){\n            return(\n                <div className={this.props.selectedLevel.css}>\n                    <LevelEnd\n                    music={this}\n                    totalPoints={this.props.totalPoints}\n                    gameComplete={this.state.gameComplete}\n                    health={this.state.health} \n                    success={this.state.success}\n                    levelPoints={this.state.levelPoints}\n                    levelEnd={this.state.levelEnd}\n                    levelComplete={this.props.levelComplete}\n                    />\n                </div>    \n            )\n        }\n        else {\n\n            return (\n                <div className={this.props.selectedLevel.css}>\n                    <div className='level-column'>\n                        <div className='health-container'>\n                            <img className='health-img' src={this.getHealth()} alt=\"health meter\"></img>\n                        </div>\n                        <div className='game-play-container'>\n                            <div className='tile-grid-container'>\n                                <div className='tile-grid' style={{display: this.state.bossView ? 'none' : 'block'}}>\n                                    {this.renderTargets()}\n                                </div>\n                                <div className='tile-grid' style={{display: this.state.bossView ? 'block' : 'none'}}>\n                                    {this.renderBoss()}\n                                </div>\n                            </div>\n                            \n                        </div>\n                    </div>\n                    <div className='score-container'>\n                    <div className='strikes'>   \n                        <div className='strikes-tile'>\n                            <img className='stikes-img' src={this.state.hitFriendlyCount >= 1 ? friendlyStrike : friendlySmall} alt=\"alien strikes\"></img>\n                        </div>\n                        <div className='strikes-tile'>\n                            <img className='stikes-img' src={this.state.hitFriendlyCount >= 2 ? friendlyStrike : friendlySmall} alt=\"alien strikes\"></img>\n                        </div>\n                        <div className='strikes-tile'>        \n                            <img className='stikes-img' src={this.state.hitFriendlyCount === 3 ? friendlyStrike : friendlySmall} alt=\"alien strikes\"></img>\n                        </div>\n                    </div> \n                        <div className='level-score'>\n                            <p style={{color:'whitesmoke', textAlign: 'center'}}>\n                                {this.state.bossView ? 'Boss Health: ' + this.state.bossHealth : 'Score:' + this.state.levelPoints}\n                                </p>\n                        </div>\n                    </div> \n                </div> \n            )\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}