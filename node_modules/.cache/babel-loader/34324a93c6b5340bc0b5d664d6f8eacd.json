{"ast":null,"code":"var _jsxFileName = \"/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/BossFightContainer.js\";\nimport React, { Component } from 'react';\nimport FlipMove from 'react-flip-move';\nimport Targets from '../Components/Targets';\nimport LevelEnd from '../Components/LevelEnd';\nimport healthFull from '../Assets/HealthFull.png';\nimport health3 from '../Assets/Health3.png';\nimport health2 from '../Assets/Health2.png';\nimport health1 from '../Assets/Health1.png';\nimport healthEmpty from '../Assets/HealthEmpty.png';\nimport levelOne from '../Assets/Audio/levelOne.mp3';\nlet music;\nexport default class BossFightContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedLevel: this.props.selectedLevel,\n      //this should hold all info the container needs to render this level\n      blasterPower: this.props.blasterPower,\n      health: this.props.health,\n      maxHealth: this.props.maxHealth,\n      targets: null,\n      boss: [{\n        name: 'Boss',\n        target_type: 'boss',\n        isClicked: 100\n      }],\n      counter: 0,\n      isClicked: 0,\n      levelPoints: 0,\n      bossHealth: 100,\n      success: false,\n      levelEnd: false,\n      firendlyBackgroundColor: '#18FCFF',\n      debrisBackgroundColor: '#0B162A',\n      hitFriendlyCount: 0\n    };\n\n    this.componentDidMount = () => {\n      music = new Audio(this.getMusic());\n      this.runGame();\n    };\n\n    this.getMusic = () => {\n      switch (this.state.selectedLevel.name) {\n        case 'Level One':\n          return levelOne;\n\n        default:\n          return levelOne;\n      }\n    };\n\n    this.handleClick = (name, target_type) => {\n      //finds the target that was clicked\n      let thisTarget = this.state.targets.find(target => target.name === name); //conditional for responding to target type\n\n      if (target_type === 'bomb') {\n        if (thisTarget.isClicked === 0) {\n          thisTarget.isClicked = 1;\n          this.setState({\n            isClicked: 1,\n            health: this.state.health - 1\n          });\n        }\n      }\n\n      if (target_type === 'asteroid') {\n        if (thisTarget.isClicked < 2) {\n          thisTarget.isClicked += this.state.blasterPower;\n          this.setState({\n            isClicked: this.state.isClicked + this.state.blasterPower\n          });\n\n          if (thisTarget.isClicked >= 2) {\n            this.setState({\n              levelPoints: this.state.levelPoints + 3\n            });\n          }\n        }\n      }\n\n      if (target_type === 'boss') {\n        if (thisTarget.isClicked > 0) {\n          thisTarget.isClicked -= this.state.blasterPower;\n          this.setState({\n            bossHealth: this.state.bossHealth - this.state.blasterPower\n          });\n\n          if (thisTarget.isClicked <= 0) {\n            this.setState({\n              levelPoints: this.state.levelPoints + 1000 //call winning condition\n\n            });\n          }\n        }\n      }\n    };\n\n    this.resetTargets = () => {\n      let targetsCopy = [...this.state.targets];\n\n      for (const target of targetsCopy) {\n        target.isClicked = 0;\n      }\n    };\n\n    this.establishTargets = string => {\n      let targets = [];\n      let targetArray = string.split('');\n\n      for (let i = 0; i < targetArray.length; i++) {\n        if (targetArray[i] === '2') {\n          targets.push({\n            name: i,\n            target_type: 'bomb',\n            isClicked: 0\n          });\n        } else if (targetArray[i] === '3') {\n          targets.push({\n            name: i,\n            target_type: 'asteroid',\n            isClicked: 0\n          });\n        }\n      }\n\n      this.setState({\n        targets: targets\n      });\n    };\n\n    this.loadLevelGrid = () => {\n      this.setState({\n        targets: this.shuffleGrid(this.state.targets)\n      });\n    };\n\n    this.shuffleGrid = array => {\n      let currentIndex = array.length,\n          temp,\n          random;\n\n      while (0 !== currentIndex) {\n        random = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temp = array[currentIndex];\n        array[currentIndex] = array[random];\n        array[random] = temp;\n      }\n\n      return array;\n    };\n\n    this.renderTargets = () => {\n      return React.createElement(FlipMove, {\n        staggerDelayBy: 100,\n        appearAnimation: \"elevator\",\n        enterAnimation: \"fade\",\n        leaveAnimation: \"fade\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, this.state.targets.map(target => React.createElement(Targets, Object.assign({\n        handleClick: this.handleClick,\n        key: target.name\n      }, target, {\n        friendlyBackgroundColor: this.state.friendlyBackgroundColor,\n        debrisBackgroundColor: this.state.debrisBackgroundColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }))));\n    };\n\n    this.playMusic = () => {\n      music.play();\n    };\n\n    this.stopMusic = () => {\n      music.pause();\n      music.currentTime = 0.0;\n    };\n\n    this.getHealth = () => {\n      if (this.state.health === this.state.maxHealth) {\n        return healthFull;\n      } else if (this.state.health === this.state.maxHealth * 0.75) {\n        return health3;\n      } else if (this.state.health === this.state.maxHealth * 0.5) {\n        return health2;\n      } else if (this.state.health === this.state.maxHealth * 0.25) {\n        return health1;\n      } else {\n        return healthEmpty;\n      }\n    };\n\n    this.runGame = () => {\n      this.playMusic(); //debris game loop\n\n      this.runGameLoop();\n      this.runBoss();\n    };\n\n    this.runGameLoop = () => {\n      //  this.renderTargets();\n      if (this.state.targets === null) {\n        this.establishTargets(this.state.selectedLevel.targetString);\n      }\n\n      var gameLoop = setInterval(() => {\n        this.resetTargets();\n        this.loadLevelGrid(); //conditions for debris loop ending\n\n        if (this.state.levelPoints % 36 === 0) {\n          // this condition needs to change\n          clearInterval(gameLoop);\n        } //leaving first two conditions for weakened boss mode stretch goal\n        else if (this.state.levelPoints < 0 || this.state.hitFriendlyCount === 3 || this.state.health === 0) {\n            clearInterval(gameLoop);\n            this.stopMusic();\n            this.setState({\n              levelEnd: true\n            });\n          }\n      }, this.state.selectedLevel.BPM);\n      c;\n    };\n\n    this.runBoss = () => {\n      //render boss -- load Targets component with a single boss target? use satellite as stand in for now\n      var bossLoop = setInterval(() => {\n        this.renderBoss();\n        this.setState({\n          counter: this.state.counter + 1\n        });\n\n        if (this.state.counter % 2 === 0) {\n          clearInterval(bossLoop);\n        }\n      }, 2000);\n    };\n\n    this.renderBoss = () => {\n      return React.createElement(FlipMove, {\n        staggerDelayBy: 100,\n        appearAnimation: \"elevator\",\n        enterAnimation: \"fade\",\n        leaveAnimation: \"fade\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, this.state.boss.map(boss => React.createElement(Targets, Object.assign({\n        handleClick: this.handleClick,\n        key: boss.name\n      }, boss, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }))));\n    };\n  }\n\n  render() {\n    if (this.state.targets === null) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, \"LOADING!\");\n    }\n\n    if (this.state.levelEnd) {\n      return React.createElement(\"div\", {\n        className: this.props.selectedLevel.css,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(LevelEnd, {\n        health: this.state.health,\n        success: this.state.success,\n        levelPoints: this.state.levelPoints,\n        levelEnd: this.state.levelEnd,\n        levelComplete: this.props.levelComplete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      className: this.props.selectedLevel.css,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"level-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"health-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"health-img\",\n      src: this.getHealth(),\n      alt: \"health meter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-play-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, this.renderTargets())))), React.createElement(\"div\", {\n      className: \"score-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"level-score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        color: 'whitesmoke',\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"Score: \", this.state.levelPoints))));\n  }\n\n}","map":{"version":3,"sources":["/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/BossFightContainer.js"],"names":["React","Component","FlipMove","Targets","LevelEnd","healthFull","health3","health2","health1","healthEmpty","levelOne","music","BossFightContainer","state","selectedLevel","props","blasterPower","health","maxHealth","targets","boss","name","target_type","isClicked","counter","levelPoints","bossHealth","success","levelEnd","firendlyBackgroundColor","debrisBackgroundColor","hitFriendlyCount","componentDidMount","Audio","getMusic","runGame","handleClick","thisTarget","find","target","setState","resetTargets","targetsCopy","establishTargets","string","targetArray","split","i","length","push","loadLevelGrid","shuffleGrid","array","currentIndex","temp","random","Math","floor","renderTargets","map","friendlyBackgroundColor","playMusic","play","stopMusic","pause","currentTime","getHealth","runGameLoop","runBoss","targetString","gameLoop","setInterval","clearInterval","BPM","c","bossLoop","renderBoss","render","css","levelComplete","color","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport FlipMove from 'react-flip-move'\nimport Targets from '../Components/Targets'\nimport LevelEnd from '../Components/LevelEnd'\nimport healthFull from '../Assets/HealthFull.png'\nimport health3 from '../Assets/Health3.png'\nimport health2 from '../Assets/Health2.png'\nimport health1 from '../Assets/Health1.png'\nimport healthEmpty from '../Assets/HealthEmpty.png'\nimport levelOne from '../Assets/Audio/levelOne.mp3'\nlet music;\n\n\nexport default class BossFightContainer extends Component{\n\n    //refactor later to use a switch statement to run through these functions based on which level is selected\n\n    state = {\n        selectedLevel: this.props.selectedLevel, //this should hold all info the container needs to render this level\n        blasterPower: this.props.blasterPower,\n        health: this.props.health,\n        maxHealth: this.props.maxHealth,\n        targets: null,\n        boss: [{name: 'Boss', target_type: 'boss', isClicked: 100}],\n        counter: 0,\n        isClicked: 0,\n        levelPoints: 0,\n        bossHealth: 100,\n        success: false,\n        levelEnd: false,\n        firendlyBackgroundColor: '#18FCFF',\n        debrisBackgroundColor: '#0B162A',\n        hitFriendlyCount: 0\n    }\n    \n\n    //loads everything and holds setInterval loops\n    componentDidMount = () => {\n        music = new Audio(this.getMusic())\n        \n        this.runGame();    \n    }\n    getMusic = () => {\n        switch (this.state.selectedLevel.name){\n            case 'Level One':\n                return levelOne\n            default:\n                return levelOne\n        }\n    }\n\n    //function for handling target clicks\n    handleClick = (name, target_type) => {\n        //finds the target that was clicked\n        let thisTarget = this.state.targets.find(target => target.name === name)  \n        //conditional for responding to target type\n        if(target_type === 'bomb'){\n            if(thisTarget.isClicked === 0){\n                thisTarget.isClicked = 1\n                this.setState({\n                    isClicked: 1,\n                    health: this.state.health-1\n                })\n            }\n        }\n        if(target_type === 'asteroid'){\n            if(thisTarget.isClicked < 2){\n                thisTarget.isClicked += this.state.blasterPower;\n                this.setState({\n                    isClicked: this.state.isClicked + this.state.blasterPower\n                })\n                if(thisTarget.isClicked >= 2){\n                    this.setState({\n                        levelPoints: this.state.levelPoints+3\n                    })\n                }\n            }        \n        }\n        if(target_type === 'boss'){\n            if(thisTarget.isClicked > 0){\n                thisTarget.isClicked -= this.state.blasterPower;\n                this.setState({\n                    bossHealth: this.state.bossHealth - this.state.blasterPower\n                })\n                if(thisTarget.isClicked <= 0){\n                    this.setState({\n                        levelPoints: this.state.levelPoints+1000\n                        //call winning condition\n                    })\n                }\n            }\n        }\n    }\n\n    // resets the state for targets, used for setInterval loop\n    resetTargets = () => {\n        let targetsCopy = [...this.state.targets];\n        for(const target of targetsCopy){\n            target.isClicked = 0\n        }\n    }\n    //translates targetString into objects\n    establishTargets = (string) => {\n        let targets = [];\n        let targetArray = string.split('');\n        for (let i = 0; i < targetArray.length; i++){\n            if(targetArray[i] === '2'){\n                targets.push({name: i, target_type: 'bomb', isClicked: 0})\n            }\n            else if(targetArray[i] === '3'){\n                targets.push({name: i, target_type: 'asteroid', isClicked: 0})\n            }\n        }\n        this.setState({\n            targets: targets\n        })\n    }\n  \n    //load the targets\n    loadLevelGrid = () => {\n        this.setState({\n            targets: this.shuffleGrid(this.state.targets)\n        })\n    }\n\n    //shuffles the targets for loading\n    shuffleGrid = (array) => {\n        let currentIndex = array.length, temp, random;\n        while(0 !== currentIndex){\n            random = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temp = array[currentIndex];\n            array[currentIndex] = array[random];\n            array[random] = temp;\n        }\n        return array\n    }\n\n    // passes the targets to the Target component\n    renderTargets = () => {\n        \n        return <FlipMove\n        staggerDelayBy={100}\n        appearAnimation=\"elevator\"\n        enterAnimation=\"fade\"\n        leaveAnimation=\"fade\"\n        >\n        {this.state.targets.map(target => <Targets \n        handleClick={this.handleClick} key={target.name}{...target}\n        friendlyBackgroundColor={this.state.friendlyBackgroundColor}\n        debrisBackgroundColor={this.state.debrisBackgroundColor}\n        />)}\n        </FlipMove>\n    }\n    playMusic = () => {\n        music.play();\n    }\n\n    stopMusic = () => {\n        music.pause();\n        music.currentTime = 0.0;\n    }\n\n    getHealth = () => {\n        if(this.state.health === this.state.maxHealth){\n            return healthFull;\n        }\n        else if (this.state.health === (this.state.maxHealth * 0.75)){\n            return health3;\n        }\n        else if(this.state.health === (this.state.maxHealth * 0.5)){\n            return health2;\n        }\n        else if (this.state.health === (this.state.maxHealth * 0.25)){\n            return health1;\n        }\n        else{\n            return healthEmpty;\n        }\n    }\n\n    runGame = () => {\n        this.playMusic();\n        //debris game loop\n        this.runGameLoop();\n        this.runBoss();\n    }\n    //debris game loop\n    runGameLoop = () => {\n        //  this.renderTargets();\n        if (this.state.targets === null){\n            this.establishTargets(this.state.selectedLevel.targetString)\n        }\n        var gameLoop = setInterval(() =>{\n            this.resetTargets()\n            this.loadLevelGrid()\n            //conditions for debris loop ending\n            if(this.state.levelPoints % 36 === 0){ // this condition needs to change\n                clearInterval(gameLoop)\n            }\n            //leaving first two conditions for weakened boss mode stretch goal\n            else if(this.state.levelPoints < 0 || this.state.hitFriendlyCount === 3\n                || this.state.health === 0){\n                clearInterval(gameLoop)\n                this.stopMusic()\n                this.setState({\n                    levelEnd: true\n                })\n            }\n        }, this.state.selectedLevel.BPM)\n        c\n    }\n    // Function for displaying boss on screen\n    runBoss = () => {\n        //render boss -- load Targets component with a single boss target? use satellite as stand in for now\n        var bossLoop = setInterval(() => {\n            this.renderBoss();\n            this.setState({\n                counter: this.state.counter+1\n            })\n            if(this.state.counter % 2 === 0){\n                clearInterval(bossLoop)\n            }\n        }, 2000)\n    }\n    renderBoss = () => {\n        \n        return <FlipMove\n        staggerDelayBy={100}\n        appearAnimation=\"elevator\"\n        enterAnimation=\"fade\"\n        leaveAnimation=\"fade\"\n        >\n        {this.state.boss.map(boss => <Targets \n        handleClick={this.handleClick} key={boss.name}{...boss}\n        />)}\n        </FlipMove>\n    }\n\n    render() {\n        if (this.state.targets === null){\n            return <h1>LOADING!</h1>\n        }\n        if (this.state.levelEnd){\n            return(\n                <div className={this.props.selectedLevel.css}>\n                    <LevelEnd\n                    health={this.state.health} \n                    success={this.state.success}\n                    levelPoints={this.state.levelPoints}\n                    levelEnd={this.state.levelEnd}\n                    levelComplete={this.props.levelComplete}\n                    />\n                </div>    \n            )\n        }\n        return (\n\n            <div className={this.props.selectedLevel.css}>\n                <div className='level-column'>\n                    <div className='health-container'>\n                        <img className='health-img' src={this.getHealth()} alt=\"health meter\"></img>\n                    </div>\n                    <div className='game-play-container'>\n                        <div className='tile-grid-container'>\n                            <div className='tile-grid'>\n                                {this.renderTargets()}\n                            </div>\n                        </div>\n                        \n                    </div>\n                </div>\n                <div className='score-container'>\n                    <div className='level-score'>\n                        <p style={{color:'whitesmoke', textAlign: 'center'}}>Score: {this.state.levelPoints}</p>\n                    </div>\n                </div> \n            </div>\n            \n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}