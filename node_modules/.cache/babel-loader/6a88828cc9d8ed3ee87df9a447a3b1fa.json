{"ast":null,"code":"var _jsxFileName = \"/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/LevelContainer.js\";\nimport React, { Component } from 'react';\nimport Targets from '../Components/Targets';\nimport FlipMove from 'react-flip-move';\nexport default class LevelContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedLevel: this.props.selectedLevel,\n      //this should hold all info the container needs to render this level\n      targets: null,\n      counter: 0,\n      isClicked: false,\n      levelPoints: 0,\n      levelComplete: false\n    };\n\n    this.handleClick = (name, target_type) => {\n      //finds the target that was clicked\n      let thisTarget = this.state.targets.find(target => target.name === name);\n      thisTarget.isClicked = true; //conditional for responding to target type\n\n      if (target_type === 'debris') {\n        this.setState({\n          isClicked: true,\n          levelPoints: this.state.levelPoints + 1\n        });\n      }\n\n      if (target_type === 'friendly') {\n        this.setState({\n          isClicked: true,\n          levelPoints: this.state.levelPoints - 2\n        });\n      }\n    };\n\n    this.resetTargets = () => {\n      let targetsCopy = [...this.state.targets];\n\n      for (const target of targetsCopy) {\n        target.isClicked = false;\n      }\n    };\n\n    this.establishTargets = string => {\n      let targets = [];\n      let targetArray = string.split('');\n\n      for (let i = 0; i < targetArray.length; i++) {\n        if (targetArray[i] === '0') {\n          targets.push({\n            id: i,\n            target_type: 'debris',\n            isClicked: false\n          });\n        } else if (targetArray[i] === '1') {\n          targets.push({\n            id: i,\n            target_type: 'friendly',\n            isClicked: false\n          });\n        }\n      }\n\n      this.setState({\n        targets: targets\n      });\n    };\n\n    this.componentDidMount = () => {\n      //translate targets function\n      if (this.state.targets === null) {\n        this.establishTargets(this.state.selectedLevel.targetString);\n      }\n\n      var gameLoop = setInterval(() => {\n        this.resetTargets();\n        this.loadLevelOneGrid();\n        this.setState({\n          counter: this.state.counter + 1\n        }); //conditions for level ending\n\n        if (this.state.counter === 5) {\n          clearInterval(gameLoop);\n          this.setState({\n            levelComplete: true\n          });\n          this.props.levelComplete(this.state.levelComplete, this.state.levelPoints);\n        }\n\n        if (this.state.levelPoints < 0) {\n          clearInterval(gameLoop);\n          this.props.levelComplete(this.state.levelComplete, this.state.levelPoints);\n        }\n      }, 2000);\n    };\n\n    this.loadLevelOneGrid = () => {\n      this.setState({\n        targets: this.shuffleGrid(this.state.targets)\n      });\n    };\n\n    this.shuffleGrid = array => {\n      let currentIndex = array.length,\n          temp,\n          random;\n\n      while (0 !== currentIndex) {\n        random = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temp = array[currentIndex];\n        array[currentIndex] = array[random];\n        array[random] = temp;\n      }\n\n      return array;\n    };\n\n    this.renderTargets = () => {\n      return; // return <FlipMove>{this.state.targets.map(target => <Targets handleClick={this.handleClick} key={target.id}{...target}/>)}</FlipMove>\n    };\n  }\n\n  render() {\n    if (this.state.targets === null) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"LOADING!\");\n    }\n\n    return React.createElement(\"div\", {\n      className: this.props.selectedLevel.css,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.renderTargets())), React.createElement(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        color: 'grey'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Score: \", this.state.levelPoints)));\n  }\n\n}","map":{"version":3,"sources":["/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/LevelContainer.js"],"names":["React","Component","Targets","FlipMove","LevelContainer","state","selectedLevel","props","targets","counter","isClicked","levelPoints","levelComplete","handleClick","name","target_type","thisTarget","find","target","setState","resetTargets","targetsCopy","establishTargets","string","targetArray","split","i","length","push","id","componentDidMount","targetString","gameLoop","setInterval","loadLevelOneGrid","clearInterval","shuffleGrid","array","currentIndex","temp","random","Math","floor","renderTargets","render","css","textAlign","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Targets from '../Components/Targets'\nimport FlipMove from 'react-flip-move';\n\nexport default class LevelContainer extends Component{\n\n    //refactor later to use a switch statement to run through these functions based on which level is selected\n\n    state = {\n        selectedLevel: this.props.selectedLevel, //this should hold all info the container needs to render this level\n\n        targets: null,\n        counter: 0,\n        isClicked: false,\n        levelPoints: 0,\n        levelComplete: false \n       \n    }\n\n    //function for handling target clicks\n    handleClick = (name, target_type) => {\n        //finds the target that was clicked\n        let thisTarget = this.state.targets.find(target => target.name === name)\n        thisTarget.isClicked = true\n        //conditional for responding to target type\n        if(target_type === 'debris'){\n            this.setState({\n                isClicked: true,\n                levelPoints: this.state.levelPoints+1\n            })\n        }\n        if(target_type === 'friendly'){\n            this.setState({\n                isClicked: true,\n                levelPoints: this.state.levelPoints-2\n            })\n        }\n    }\n\n    // resets the state for targets, used for setInterval loop\n    resetTargets = () => {\n        let targetsCopy = [...this.state.targets];\n        for(const target of targetsCopy){\n            target.isClicked = false\n        }\n    }\n    establishTargets = (string) => {\n        \n        let targets = [];\n        let targetArray = string.split('');\n        for (let i = 0; i < targetArray.length; i++){\n            if(targetArray[i] === '0'){\n                targets.push({id: i, target_type: 'debris', isClicked: false})\n            }\n            else if(targetArray[i] === '1'){\n                targets.push({id: i, target_type: 'friendly', isClicked: false})\n            }\n        }\n        this.setState({\n            targets: targets\n        })\n    }\n    //loads everything and holds setInterval loops\n    componentDidMount = () => {\n        //translate targets function\n        if (this.state.targets === null){\n            this.establishTargets(this.state.selectedLevel.targetString)\n        }\n        var gameLoop = setInterval(() =>{\n            this.resetTargets()\n            this.loadLevelOneGrid()\n            this.setState({\n                counter: this.state.counter+1\n            })\n            //conditions for level ending\n            if(this.state.counter === 5 ){\n                clearInterval(gameLoop)\n                this.setState({\n                    levelComplete: true\n                })\n                this.props.levelComplete(this.state.levelComplete, this.state.levelPoints) \n            }\n            if(this.state.levelPoints < 0){\n                clearInterval(gameLoop)\n                this.props.levelComplete(this.state.levelComplete, this.state.levelPoints)\n            }\n        }, 2000)    \n        \n    }\n  \n    //this should be a general load level grid function with a switch statement determining what to load based on selected level\n    //load the targets\n    loadLevelOneGrid = () => {\n        this.setState({\n            targets: this.shuffleGrid(this.state.targets)\n        })\n    }\n    //shuffles the targets for loading\n    shuffleGrid = (array) => {\n        let currentIndex = array.length, temp, random;\n        while(0 !== currentIndex){\n            random = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temp = array[currentIndex];\n            array[currentIndex] = array[random];\n            array[random] = temp;\n        }\n        return array\n    }\n    //passes the targets to the Target component\n    renderTargets = () => {\n        return \n    // return <FlipMove>{this.state.targets.map(target => <Targets handleClick={this.handleClick} key={target.id}{...target}/>)}</FlipMove>\n    \n    }\n\n    render() {\n        if (this.state.targets === null){\n            return <h1>LOADING!</h1>\n        }\n        return (\n            \n            <div className={this.props.selectedLevel.css}>    \n                <div className='tile-grid-container'>\n                    <div className='tile-grid'>\n                        {this.renderTargets()}\n                    </div>\n                </div>\n                <div style={{textAlign: 'center'}}>\n                    <p style={{color:'grey'}}>Score: {this.state.levelPoints}</p>\n                </div>\n            </div>\n            \n        )\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}