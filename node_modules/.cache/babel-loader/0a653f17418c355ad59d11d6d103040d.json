{"ast":null,"code":"var _jsxFileName = \"/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/LevelContainer.js\";\nimport React, { Component } from 'react';\nimport Targets from '../Components/Targets';\nexport default class LevelContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedLevel: this.props.selectedLevel,\n      //this should hold all info the container needs to render this level\n      targets: [{\n        name: 'one',\n        target_type: 'debris',\n        isClicked: false\n      }, {\n        name: 'two',\n        target_type: 'debris',\n        isClicked: false\n      }, {\n        name: 'three',\n        target_type: 'debris',\n        isClicked: false\n      }, {\n        name: 'four',\n        target_type: 'friendly',\n        isClicked: false\n      }],\n      counter: 0,\n      isClicked: false,\n      levelPoints: 0\n    };\n\n    this.handleClick = (name, target_type) => {\n      //finds the target that was clicked\n      let thisTarget = this.state.targets.find(target => target.name === name);\n      thisTarget.isClicked = true; //conditional for responding to target type\n\n      if (target_type === 'debris') {\n        this.setState({\n          isClicked: true,\n          levelPoints: this.state.levelPoints + 1\n        });\n      }\n\n      if (target_type === 'friendly') {\n        this.setState({\n          isClicked: true,\n          levelPoints: this.state.levelPoints - 2\n        });\n      }\n    };\n\n    this.resetTargets = () => {\n      let targetsCopy = [...this.state.targets];\n\n      for (const target of targetsCopy) {\n        target.isClicked = false;\n      }\n    };\n\n    this.componentDidMount = () => {\n      var gameLoop = setInterval(() => {\n        this.resetTargets();\n        this.loadLevelOneGrid();\n        this.setState({\n          counter: this.state.counter + 1\n        }); //conditions for level ending\n\n        if (this.state.counter === 5 || this.state.levelPoints < 0) {\n          clearInterval(gameLoop);\n          this.props.levelComplete(true, this.state.le); // this will need to take in values (pass/fail, points)\n        }\n      }, 1000);\n    };\n\n    this.loadLevelOneGrid = () => {\n      this.setState({\n        targets: this.shuffleGrid(this.state.targets)\n      });\n    };\n\n    this.shuffleGrid = array => {\n      let currentIndex = array.length,\n          temp,\n          random;\n\n      while (0 !== currentIndex) {\n        random = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temp = array[currentIndex];\n        array[currentIndex] = array[random];\n        array[random] = temp;\n      }\n\n      return array;\n    };\n\n    this.renderTargets = () => {\n      return this.state.targets.map((tile, i) => React.createElement(Targets, Object.assign({\n        handleClick: this.handleClick,\n        key: i\n      }, tile, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      })));\n    };\n  }\n\n  render() {\n    if (this.state.targets === null) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"LOADING!\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, this.renderTargets())), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Score: \", this.state.levelPoints)));\n  }\n\n}","map":{"version":3,"sources":["/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/LevelContainer.js"],"names":["React","Component","Targets","LevelContainer","state","selectedLevel","props","targets","name","target_type","isClicked","counter","levelPoints","handleClick","thisTarget","find","target","setState","resetTargets","targetsCopy","componentDidMount","gameLoop","setInterval","loadLevelOneGrid","clearInterval","levelComplete","le","shuffleGrid","array","currentIndex","length","temp","random","Math","floor","renderTargets","map","tile","i","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAIA,eAAe,MAAMC,cAAN,SAA6BF,SAA7B,CAAsC;AAAA;AAAA;AAAA,SAIjDG,KAJiD,GAIzC;AACJC,MAAAA,aAAa,EAAE,KAAKC,KAAL,CAAWD,aADtB;AACqC;AAEzCE,MAAAA,OAAO,EAAE,CAAC;AAACC,QAAAA,IAAI,EAAE,KAAP;AAAcC,QAAAA,WAAW,EAAE,QAA3B;AAAqCC,QAAAA,SAAS,EAAE;AAAhD,OAAD,EAAwD;AAACF,QAAAA,IAAI,EAAE,KAAP;AAAcC,QAAAA,WAAW,EAAE,QAA3B;AAAqCC,QAAAA,SAAS,EAAE;AAAhD,OAAxD,EACT;AAACF,QAAAA,IAAI,EAAE,OAAP;AAAgBC,QAAAA,WAAW,EAAE,QAA7B;AAAuCC,QAAAA,SAAS,EAAE;AAAlD,OADS,EACgD;AAACF,QAAAA,IAAI,EAAE,MAAP;AAAeC,QAAAA,WAAW,EAAE,UAA5B;AAAwCC,QAAAA,SAAS,EAAE;AAAnD,OADhD,CAHL;AAMJC,MAAAA,OAAO,EAAE,CANL;AAOJD,MAAAA,SAAS,EAAE,KAPP;AAQJE,MAAAA,WAAW,EAAE;AART,KAJyC;;AAAA,SAiBjDC,WAjBiD,GAiBnC,CAACL,IAAD,EAAOC,WAAP,KAAuB;AACjC;AACA,UAAIK,UAAU,GAAG,KAAKV,KAAL,CAAWG,OAAX,CAAmBQ,IAAnB,CAAwBC,MAAM,IAAIA,MAAM,CAACR,IAAP,KAAgBA,IAAlD,CAAjB;AACAM,MAAAA,UAAU,CAACJ,SAAX,GAAuB,IAAvB,CAHiC,CAIjC;;AACA,UAAGD,WAAW,KAAK,QAAnB,EAA4B;AACxB,aAAKQ,QAAL,CAAc;AACVP,UAAAA,SAAS,EAAE,IADD;AAEVE,UAAAA,WAAW,EAAE,KAAKR,KAAL,CAAWQ,WAAX,GAAuB;AAF1B,SAAd;AAIH;;AACD,UAAGH,WAAW,KAAK,UAAnB,EAA8B;AAC1B,aAAKQ,QAAL,CAAc;AACVP,UAAAA,SAAS,EAAE,IADD;AAEVE,UAAAA,WAAW,EAAE,KAAKR,KAAL,CAAWQ,WAAX,GAAuB;AAF1B,SAAd;AAIH;AACJ,KAlCgD;;AAAA,SAqCjDM,YArCiD,GAqClC,MAAM;AACjB,UAAIC,WAAW,GAAG,CAAC,GAAG,KAAKf,KAAL,CAAWG,OAAf,CAAlB;;AACA,WAAI,MAAMS,MAAV,IAAoBG,WAApB,EAAgC;AAC5BH,QAAAA,MAAM,CAACN,SAAP,GAAmB,KAAnB;AACH;AACJ,KA1CgD;;AAAA,SA6CjDU,iBA7CiD,GA6C7B,MAAM;AAEtB,UAAIC,QAAQ,GAAGC,WAAW,CAAC,MAAK;AAC5B,aAAKJ,YAAL;AACA,aAAKK,gBAAL;AACA,aAAKN,QAAL,CAAc;AACVN,UAAAA,OAAO,EAAE,KAAKP,KAAL,CAAWO,OAAX,GAAmB;AADlB,SAAd,EAH4B,CAM5B;;AACA,YAAG,KAAKP,KAAL,CAAWO,OAAX,KAAuB,CAAvB,IAA4B,KAAKP,KAAL,CAAWQ,WAAX,GAAyB,CAAxD,EAA0D;AACtDY,UAAAA,aAAa,CAACH,QAAD,CAAb;AACA,eAAKf,KAAL,CAAWmB,aAAX,CAAyB,IAAzB,EAA+B,KAAKrB,KAAL,CAAWsB,EAA1C,EAFsD,CAER;AACjD;AACJ,OAXyB,EAWvB,IAXuB,CAA1B;AAaH,KA5DgD;;AAAA,SAgEjDH,gBAhEiD,GAgE9B,MAAM;AACrB,WAAKN,QAAL,CAAc;AACVV,QAAAA,OAAO,EAAE,KAAKoB,WAAL,CAAiB,KAAKvB,KAAL,CAAWG,OAA5B;AADC,OAAd;AAGH,KApEgD;;AAAA,SAsEjDoB,WAtEiD,GAsElCC,KAAD,IAAW;AACrB,UAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,UAAiCC,IAAjC;AAAA,UAAuCC,MAAvC;;AACA,aAAM,MAAMH,YAAZ,EAAyB;AACrBG,QAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgBH,YAA3B,CAAT;AACAA,QAAAA,YAAY,IAAI,CAAhB;AACAE,QAAAA,IAAI,GAAGH,KAAK,CAACC,YAAD,CAAZ;AACAD,QAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,MAAD,CAA3B;AACAJ,QAAAA,KAAK,CAACI,MAAD,CAAL,GAAgBD,IAAhB;AACH;;AACD,aAAOH,KAAP;AACH,KAhFgD;;AAAA,SAkFjDO,aAlFiD,GAkFjC,MAAM;AAClB,aAAO,KAAK/B,KAAL,CAAWG,OAAX,CAAmB6B,GAAnB,CAAuB,CAACC,IAAD,EAAOC,CAAP,KAAa,oBAAC,OAAD;AAAS,QAAA,WAAW,EAAE,KAAKzB,WAA3B;AAAwC,QAAA,GAAG,EAAEyB;AAA7C,SAAmDD,IAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAApC,CAAP;AACH,KApFgD;AAAA;;AAsFjDE,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKnC,KAAL,CAAWG,OAAX,KAAuB,IAA3B,EAAgC;AAC5B,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH;;AACD,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK4B,aAAL,EADL,CADJ,CADJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAW,KAAK/B,KAAL,CAAWQ,WAAtB,CADJ,CANJ,CADJ;AAYH;;AAtGgD","sourcesContent":["import React, { Component } from 'react';\nimport Targets from '../Components/Targets'\n\n\n\nexport default class LevelContainer extends Component{\n\n    //refactor later to use a switch statement to run through these functions based on which level is selected\n\n    state = {\n        selectedLevel: this.props.selectedLevel, //this should hold all info the container needs to render this level\n\n        targets: [{name: 'one', target_type: 'debris', isClicked: false},{name: 'two', target_type: 'debris', isClicked: false},\n        {name: 'three', target_type: 'debris', isClicked: false},{name: 'four', target_type: 'friendly', isClicked: false}],\n\n        counter: 0,\n        isClicked: false,\n        levelPoints: 0 \n       \n    }\n\n    //function for handling target clicks\n    handleClick = (name, target_type) => {\n        //finds the target that was clicked\n        let thisTarget = this.state.targets.find(target => target.name === name)\n        thisTarget.isClicked = true\n        //conditional for responding to target type\n        if(target_type === 'debris'){\n            this.setState({\n                isClicked: true,\n                levelPoints: this.state.levelPoints+1\n            })\n        }\n        if(target_type === 'friendly'){\n            this.setState({\n                isClicked: true,\n                levelPoints: this.state.levelPoints-2\n            })\n        }\n    }\n\n    // resets the state for targets, used for setInterval loop\n    resetTargets = () => {\n        let targetsCopy = [...this.state.targets];\n        for(const target of targetsCopy){\n            target.isClicked = false\n        }\n    }\n    \n    //loads everything and holds setInterval loops\n    componentDidMount = () => {\n        \n        var gameLoop = setInterval(() =>{\n            this.resetTargets()\n            this.loadLevelOneGrid()\n            this.setState({\n                counter: this.state.counter+1\n            })\n            //conditions for level ending\n            if(this.state.counter === 5 || this.state.levelPoints < 0){\n                clearInterval(gameLoop)\n                this.props.levelComplete(true, this.state.le) // this will need to take in values (pass/fail, points)\n            }\n        }, 1000)    \n        \n    }\n  \n    //this should be a general load level grid function with a switch statement determining what to load based on selected level\n    //load the targets\n    loadLevelOneGrid = () => {\n        this.setState({\n            targets: this.shuffleGrid(this.state.targets)\n        })\n    }\n    //shuffles the targets for loading\n    shuffleGrid = (array) => {\n        let currentIndex = array.length, temp, random;\n        while(0 !== currentIndex){\n            random = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temp = array[currentIndex];\n            array[currentIndex] = array[random];\n            array[random] = temp;\n        }\n        return array\n    }\n    //passes the targets to the Target component\n    renderTargets = () => {\n        return this.state.targets.map((tile, i) => <Targets handleClick={this.handleClick} key={i}{...tile}/>)\n    }\n\n    render() {\n        if (this.state.targets === null){\n            return <h1>LOADING!</h1>\n        }\n        return (\n            <div>    \n                <div className='tile-grid-container'>\n                    <div className='tile-grid'>\n                        {this.renderTargets()}\n                    </div>\n                </div>\n                <div>\n                    <p>Score: {this.state.levelPoints}</p>\n                </div>\n            </div>\n        )\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}