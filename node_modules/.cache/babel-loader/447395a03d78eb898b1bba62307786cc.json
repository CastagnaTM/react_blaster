{"ast":null,"code":"var _jsxFileName = \"/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Components/LevelEnd.js\";\nimport React, { Component } from 'react';\nimport BossIntro from './BossIntro';\nimport HighScores from './HighScores';\nlet highscores;\nexport default class LevelEnd extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      gameEnd: false,\n      highscores: null,\n      name: '',\n      score: null,\n      show: false,\n      showBossIntro: false,\n      currentWinner: null,\n      showForm: false\n    };\n\n    this.componentDidMount = () => {\n      if (this.props.success) {\n        this.setCurrentScore();\n        this.getHighscores();\n      }\n    };\n\n    this.handleReturn = () => {\n      this.props.levelComplete(this.props.success, this.props.levelPoints, this.props.health);\n    };\n\n    this.handleBossIntro = () => {\n      this.setState({\n        showBossIntro: true\n      });\n    };\n\n    this.displayHighscores = () => {\n      let allHighscores = this.state.highscores;\n\n      if (this.state.currentWinner !== null) {\n        allHighscores.push(this.state.currentWinner);\n      }\n\n      allHighscores.sort((a, b) => a.score < b.score ? 1 : -1);\n      highscores = allHighscores.slice(0, 5);\n      return highscores.map(score => React.createElement(HighScores, Object.assign({\n        key: score.id\n      }, score, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      })));\n    };\n\n    this.setCurrentScore = () => {\n      this.setState({\n        score: this.props.levelPoints + this.props.totalPoints + 2000\n      });\n    };\n\n    this.getHighscores = () => {\n      fetch('http://localhost:3000/users').then(resp => resp.json()).then(data => {\n        this.setState({\n          highscores: data.sort((a, b) => a.score < b.score ? 1 : -1)\n        });\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleHighScores = event => {\n      event.preventDefault();\n      fetch('http://localhost:3000/highscore', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Accept': \"application/json\"\n        },\n        body: JSON.stringify({\n          name: this.state.name,\n          score: this.state.score\n        })\n      }).then(resp => resp.json()).then(data => {\n        if (data.errors) {\n          alert(data.errors);\n        }\n      });\n      this.setState({\n        show: true,\n        name: this.state.name,\n        score: this.state.score,\n        currentWinner: {\n          name: this.state.name,\n          score: this.state.score\n        }\n      });\n    };\n  }\n\n  render() {\n    if (this.state.showBossIntro === true) {\n      return React.createElement(BossIntro, {\n        health: this.props.health,\n        success: this.props.success,\n        levelPoints: this.props.levelPoints,\n        levelComplete: this.props.levelComplete,\n        handleReturn: this.handleReturn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(\"div\", {\n        className: \"level-end-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"level-end-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text\",\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, this.props.success ? \"Congrats! You Scored \".concat(this.props.levelPoints, \" Points!\") : 'Sorry, you lost this time around...'), React.createElement(\"p\", {\n        className: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, this.props.gameComplete ? \"You Beat The Game With \".concat(this.state.score, \" Points! Enter Your Name Below:\") : null)), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        style: {\n          display: this.props.gameComplete ? 'none' : 'block'\n        },\n        className: \"hvr-ripple-out\",\n        onClick: this.props.levelName === 'Level Three' && this.props.success ? this.handleBossIntro : this.handleReturn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Continue\"))), React.createElement(\"div\", {\n        className: \"highscores-container\",\n        style: {\n          display: this.props.gameComplete ? 'block' : 'none'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, this.displayHighscores()));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Components/LevelEnd.js"],"names":["React","Component","BossIntro","HighScores","highscores","LevelEnd","state","gameEnd","name","score","show","showBossIntro","currentWinner","showForm","componentDidMount","props","success","setCurrentScore","getHighscores","handleReturn","levelComplete","levelPoints","health","handleBossIntro","setState","displayHighscores","allHighscores","push","sort","a","b","slice","map","id","totalPoints","fetch","then","resp","json","data","handleChange","event","target","value","handleHighScores","preventDefault","method","headers","body","JSON","stringify","errors","alert","render","textAlign","gameComplete","display","levelName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport BossIntro from './BossIntro'\nimport HighScores from './HighScores'\n\nlet highscores;\n\nexport default class LevelEnd extends Component {\n\n    state = {\n        gameEnd: false,\n        highscores: null,\n        name: '',\n        score: null,\n        show: false,\n        showBossIntro: false,\n        currentWinner: null,\n        showForm: false\n    }\n\n    componentDidMount = () => {\n        \n        if(this.props.success){\n            this.setCurrentScore()\n            this.getHighscores()\n        }\n    }\n\n    handleReturn = () => {\n        this.props.levelComplete(this.props.success, this.props.levelPoints, this.props.health)\n    }\n    handleBossIntro = () => {\n        this.setState({\n            showBossIntro: true\n        })\n    }\n\n\n    //in order to conditionally render the submit form, the solution below uses too many calls to state. \n    //I need to split the job up into a few functions instead? Or find a way to change how I'm processing this information\n\n    displayHighscores = () => {\n        let allHighscores = this.state.highscores\n        if(this.state.currentWinner !== null){\n            allHighscores.push(this.state.currentWinner)\n        }\n        allHighscores.sort((a,b) => a.score < b.score ? 1 : -1)\n        highscores = allHighscores.slice(0,5)\n        \n        return( highscores.map(score => <HighScores \n            key={score.id}{...score}\n             />) )\n    }\n\n     /* if(this.state.score > highscores[4].score){\n            this.setState({\n                showForm: true\n            })\n        } */\n\n    setCurrentScore = () => {\n        this.setState({\n            score: this.props.levelPoints + this.props.totalPoints + 2000\n        })\n    }\n\n    getHighscores = () => {\n        fetch('http://localhost:3000/users')\n        .then(resp => resp.json())\n        .then(data => {\n            this.setState({\n                highscores: data.sort((a,b) => a.score < b.score ? 1 : -1)\n            })\n        })\n    }\n\n    handleChange = (event) => {\n        this.setState({\n          [event.target.name]: event.target.value\n        })\n    }\n\n    handleHighScores = (event) => {\n        event.preventDefault()\n        fetch('http://localhost:3000/highscore',{\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Accept': \"application/json\"\n            },\n            body: JSON.stringify({\n                name: this.state.name,\n                score: this.state.score\n                })\n        })\n        .then(resp => resp.json())\n        .then(data => {\n            if (data.errors){\n                alert(data.errors)\n            }\n        })\n        this.setState({\n            show: true,\n            name: this.state.name,\n            score: this.state.score,\n            currentWinner: {name: this.state.name, score: this.state.score}\n        })\n    }\n\n    render(){\n        if(this.state.showBossIntro === true){\n            return(\n                <BossIntro\n                    health={this.props.health} \n                    success={this.props.success}\n                    levelPoints={this.props.levelPoints}\n                    levelComplete={this.props.levelComplete}\n                    handleReturn={this.handleReturn} \n                />\n            )\n        }\n        else{\n            return(\n                <div className='level-end-container'>\n                    <div className='level-end-grid'>\n                        <div>\n                            <p className='text' style={{textAlign: 'center'}}>\n                                {this.props.success ? `Congrats! You Scored ${this.props.levelPoints} Points!` : 'Sorry, you lost this time around...'}\n                            </p>\n                            <p className='text'>\n                            {this.props.gameComplete ? `You Beat The Game With ${this.state.score} Points! Enter Your Name Below:` : null}\n                            </p>\n                        </div>\n                        <div>\n                            <button style={{display: this.props.gameComplete ? 'none' : 'block'}}\n                            className='hvr-ripple-out' \n                            onClick={this.props.levelName === 'Level Three' && this.props.success ? this.handleBossIntro : this.handleReturn}>Continue</button>\n                        </div>\n                    </div>\n                    <div className='highscores-container' style={{display: this.props.gameComplete ? 'block' : 'none'}}>\n                        {this.displayHighscores()}\n                    </div>\n                </div>\n            )\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}