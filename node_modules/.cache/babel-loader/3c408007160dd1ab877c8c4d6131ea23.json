{"ast":null,"code":"var _jsxFileName = \"/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Components/HomeScreen.js\";\nimport React, { Component } from 'react';\nimport LevelContainer from '../Containers/LevelContainer';\nimport LevelSelector from '../Components/LevelSelector';\nimport friendlySmall from '../Assets/FriendlySmall.png';\nimport satelliteIcon from '../Assets/SatelliteIcon.png'; //this component holds the homescreen, including level selection and potentially other options\n\nexport default class HomeScreen extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      playLevel: false,\n      levels: [],\n      selectedLevel: null,\n      totalPoints: 0,\n      playedOnce: false\n    };\n\n    this.componentDidMount = () => {\n      this.getLevels();\n    };\n\n    this.levelSelect = () => {\n      return React.createElement(\"div\", {\n        className: \"home-screen-background\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"home-screen-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"Select A Level\"), React.createElement(\"p\", {\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, this.state.playedOnce ? \"New Total Score: \".concat(this.state.totalPoints) : \"Total Score: \".concat(this.state.totalPoints))), React.createElement(\"div\", {\n        className: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"level-select-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"level-select\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, this.state.levels.map((level, i) => React.createElement(LevelSelector, Object.assign({\n        key: i\n      }, level, {\n        loadLevel: this.loadLevel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"instructions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"lines\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Instructions:\"), React.createElement(\"div\", {\n        className: \"instructions-icons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"stikes-img\",\n        src: friendlySmall,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Don't Shoot These\")), React.createElement(\"div\", {\n        className: \"strikes-\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"stikes-img\",\n        src: satelliteIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Shoot These\"))))));\n    };\n\n    this.loadLevel = info => {\n      let obj = info;\n      this.setState({\n        selectedLevel: obj,\n        playLevel: true\n      });\n    };\n\n    this.getLevels = () => {\n      fetch('http://localhost:3000/levels').then(resp => resp.json()).then(data => {\n        this.setState({\n          levels: data\n        });\n      });\n    };\n\n    this.play = () => {\n      return React.createElement(LevelContainer, {\n        selectedLevel: this.state.selectedLevel,\n        levelComplete: this.levelComplete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      });\n    };\n\n    this.levelComplete = (completed, levelPoints) => {\n      if (completed === true) {\n        this.setState({\n          totalPoints: this.state.totalPoints + levelPoints,\n          playedOnce: true\n        });\n      }\n\n      this.setState({\n        playLevel: false\n      });\n    };\n  }\n\n  render() {\n    //until a level is selected, show the levels avaiable\n    if (this.state.playLevel === false) {\n      return this.levelSelect();\n    } //after selected a level, render the level\n    else {\n        return this.play();\n      }\n  }\n\n}","map":{"version":3,"sources":["/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Components/HomeScreen.js"],"names":["React","Component","LevelContainer","LevelSelector","friendlySmall","satelliteIcon","HomeScreen","state","playLevel","levels","selectedLevel","totalPoints","playedOnce","componentDidMount","getLevels","levelSelect","color","map","level","i","loadLevel","info","obj","setState","fetch","then","resp","json","data","play","levelComplete","completed","levelPoints","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport LevelContainer from '../Containers/LevelContainer'\nimport LevelSelector from '../Components/LevelSelector'\nimport friendlySmall from '../Assets/FriendlySmall.png'\nimport satelliteIcon from '../Assets/SatelliteIcon.png'\n\n\n//this component holds the homescreen, including level selection and potentially other options\n\nexport default class HomeScreen extends Component{\n\n    state = {\n        playLevel: false,\n        levels: [],\n        selectedLevel: null,\n        totalPoints: 0,\n        playedOnce: false\n    }\n\n    //calls the fetch to load level options\n    componentDidMount = () => {\n        this.getLevels()\n    }\n\n    //renders buttons for each load-able level\n    //add abiltity to load different difficulties with different formats\n    //also hide levels that haven't been unlocked yet\n    levelSelect = () => {\n        return(\n            <div className='home-screen-background'>\n                <div className='home-screen-header'>\n                    <h4 style={{color: 'white'}}>Select A Level</h4>\n                    <p style={{color: 'white'}}>{this.state.playedOnce ? `New Total Score: ${this.state.totalPoints}` : `Total Score: ${this.state.totalPoints}`}</p>\n\n                </div>\n                <div className='column'>\n                    <div className='level-select-container'>\n                        <div className='level-select'>\n                            {this.state.levels.map((level, i) => <LevelSelector key={i}{...level} \n                            loadLevel={this.loadLevel}\n                            />)}\n                        </div>\n                    </div>\n                    <div className='instructions'>\n                        <div className='lines'>\n                            <h2 className='text'>Instructions:</h2>\n                            <div className='instructions-icons'>\n                                <img className='stikes-img' src={friendlySmall}></img>\n                                <p className='text'>Don't Shoot These</p>\n                            </div>\n                            <div className='strikes-'>\n                                <img className='stikes-img' src={satelliteIcon}></img>\n                                <p className='text'>Shoot These</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    //uses info from the levelSelector button to set the selected level, and start the level\n    loadLevel = (info) => {\n        let obj = info\n        this.setState({\n            selectedLevel: obj,\n            playLevel: true\n        })\n    }\n    //fetches the levels\n    getLevels = () => {\n        fetch('http://localhost:3000/levels')\n        .then(resp => resp.json())\n        .then(data => {\n           this.setState({\n               levels: data\n           })\n        })\n    }\n\n    //renders the levelContainer (AKA the selected level)\n    play = () => {\n        return (\n            <LevelContainer \n            selectedLevel={this.state.selectedLevel}\n            levelComplete={this.levelComplete}\n            />\n        )\n    }\n\n    levelComplete = (completed, levelPoints) =>{\n        if (completed === true){\n            this.setState({\n            totalPoints: this.state.totalPoints + levelPoints,\n            playedOnce: true\n            })\n        }\n        this.setState({\n            playLevel: false,\n        })\n    }\n\n    render() {\n        //until a level is selected, show the levels avaiable\n        if (this.state.playLevel === false){\n            return (\n                this.levelSelect()\n            )\n        } \n        //after selected a level, render the level\n        else {\n            return (\n                this.play()\n            )\n        }\n    }\n        \n    \n\n}"]},"metadata":{},"sourceType":"module"}