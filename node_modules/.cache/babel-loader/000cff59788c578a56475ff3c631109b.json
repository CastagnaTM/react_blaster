{"ast":null,"code":"var _jsxFileName = \"/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/LevelContainer.js\";\nimport React, { Component } from 'react';\nimport Tiles from '../Components/Tiles';\nimport '../App.css';\nexport default class LevelContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedLevel: this.props.selectedLevel,\n      targets: [{\n        name: 'one',\n        target_type: 'debris',\n        isClicked: false\n      }, {\n        name: 'two',\n        target_type: 'debris',\n        isClicked: false\n      }, {\n        name: 'three',\n        target_type: 'debris',\n        isClicked: false\n      }, {\n        name: 'four',\n        target_type: 'friendly',\n        isClicked: false\n      }],\n      counter: 0,\n      isClicked: false,\n      points: 0\n    };\n\n    this.handleClick = name => {\n      let thisTarget = this.state.targets.find(target => target.name === name);\n      thisTarget.isClicked = true;\n      this.setState({\n        isClicked: true,\n        points: this.state.points + 1\n      });\n    };\n\n    this.resetTargets = () => {\n      let targetsCopy = [...this.state.targets];\n\n      for (const target of targetsCopy) {\n        target.isClicked = false;\n      }\n    };\n\n    this.componentDidMount = () => {\n      var gameLoop = setInterval(() => {\n        this.resetTargets();\n        this.loadLevelOneGrid();\n        this.setState({\n          counter: this.state.counter + 1\n        });\n\n        if (this.state.counter === 5) {\n          console.log('reached 5');\n          clearInterval(gameLoop);\n        }\n\n        console.log(this.state.counter);\n      }, 1000);\n    };\n\n    this.loadLevelOneGrid = () => {\n      this.setState({\n        targets: this.shuffleGrid(this.state.targets)\n      });\n    };\n\n    this.shuffleGrid = array => {\n      let currentIndex = array.length,\n          temp,\n          random;\n\n      while (0 !== currentIndex) {\n        random = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temp = array[currentIndex];\n        array[currentIndex] = array[random];\n        array[random] = temp;\n      }\n\n      return array;\n    };\n\n    this.renderTargets = () => {\n      return this.state.targets.map((tile, i) => React.createElement(Tiles, Object.assign({\n        handleClick: this.handleClick,\n        key: i\n      }, tile, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })));\n    };\n  }\n\n  render() {\n    if (this.state.targets === null) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"LOADING!\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"tile-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.renderTargets()), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, this.state.points));\n  }\n\n}","map":{"version":3,"sources":["/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/LevelContainer.js"],"names":["React","Component","Tiles","LevelContainer","state","selectedLevel","props","targets","name","target_type","isClicked","counter","points","handleClick","thisTarget","find","target","setState","resetTargets","targetsCopy","componentDidMount","gameLoop","setInterval","loadLevelOneGrid","console","log","clearInterval","shuffleGrid","array","currentIndex","length","temp","random","Math","floor","renderTargets","map","tile","i","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Tiles from '../Components/Tiles'\nimport '../App.css'\n\n\n\nexport default class LevelContainer extends Component{\n\n    //refactor later to use a switch statement to run through these functions based on which level is selected\n\n    state = {\n        selectedLevel: this.props.selectedLevel,\n\n        targets: [{name: 'one', target_type: 'debris', isClicked: false},{name: 'two', target_type: 'debris', isClicked: false},\n        {name: 'three', target_type: 'debris', isClicked: false},{name: 'four', target_type: 'friendly', isClicked: false}],\n\n        counter: 0,\n        isClicked: false,\n        points: 0\n    }\n\n    handleClick = (name) => {\n        let thisTarget = this.state.targets.find(target => target.name === name)\n        thisTarget.isClicked = true\n        this.setState({\n            isClicked: true,\n            points: this.state.points+1\n        })\n    }\n\n    resetTargets = () => {\n        let targetsCopy = [...this.state.targets];\n        for(const target of targetsCopy){\n            target.isClicked = false\n        }\n    }\n    \n    componentDidMount = () => {\n        \n        var gameLoop = setInterval(() =>{\n            this.resetTargets()\n            this.loadLevelOneGrid()\n            this.setState({\n                counter: this.state.counter+1\n            })\n            if(this.state.counter === 5){\n                console.log('reached 5')\n                clearInterval(gameLoop)\n            }\n            console.log(this.state.counter)\n        }, 1000)    \n        \n    }\n  \n    loadLevelOneGrid = () => {\n        this.setState({\n            targets: this.shuffleGrid(this.state.targets)\n        })\n    }\n    \n    shuffleGrid = (array) => {\n        let currentIndex = array.length, temp, random;\n        while(0 !== currentIndex){\n            random = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temp = array[currentIndex];\n            array[currentIndex] = array[random];\n            array[random] = temp;\n        }\n        return array\n    }\n\n    renderTargets = () => {\n        return this.state.targets.map((tile, i) => <Tiles handleClick={this.handleClick} key={i}{...tile}/>)\n    }\n\n    render() {\n        if (this.state.targets === null){\n            return <h1>LOADING!</h1>\n        }\n        return (\n            <div className='tile-grid-container'>\n                <div className='tile-grid'>\n                    {this.renderTargets()}\n                </div>\n                <div>\n                    {this.state.points}\n                </div>\n            </div>\n        )\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}