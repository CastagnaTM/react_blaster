{"ast":null,"code":"var _jsxFileName = \"/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Components/HomeScreen.js\";\nimport React, { Component } from 'react';\nimport LevelContainer from '../Containers/LevelContainer';\nimport LevelSelector from '../Components/LevelSelector'; //this component holds the homescreen, including level selection and potentially other options\n\nexport default class HomeScreen extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      playLevel: false,\n      levels: [],\n      selectedLevel: null,\n      totalPoints: 0,\n      played\n    };\n\n    this.componentDidMount = () => {\n      this.getLevels();\n    };\n\n    this.levelSelect = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"home-screen-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Select A Level\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, this.state.playedOnce ? \"Your New Total Score: \".concat(this.state.totalPoints) : \"Your Total Score: \".concat(this.state.totalPoints))), React.createElement(\"div\", {\n        className: \"home-screen-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, this.state.levels.map((level, i) => React.createElement(LevelSelector, Object.assign({\n        key: i\n      }, level, {\n        loadLevel: this.loadLevel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      })))));\n    };\n\n    this.loadLevel = info => {\n      let obj = info;\n      this.setState({\n        selectedLevel: obj,\n        playLevel: true\n      });\n    };\n\n    this.getLevels = () => {\n      fetch('http://localhost:3000/levels').then(resp => resp.json()).then(data => {\n        this.setState({\n          levels: data\n        });\n      });\n    };\n\n    this.play = () => {\n      return React.createElement(LevelContainer, {\n        selectedLevel: this.state.selectedLevel,\n        levelComplete: this.levelComplete // playLevel={this.state.playLevel}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    };\n\n    this.levelComplete = (completed, levelPoints) => {\n      if (completed === true) {\n        this.setState({\n          totalPoints: this.state.totalPoints + levelPoints\n        });\n      }\n\n      this.setState({\n        playLevel: false\n      });\n    };\n  }\n\n  render() {\n    //until a level is selected, show the levels avaiable\n    if (this.state.playLevel === false) {\n      return this.levelSelect();\n    } //after selected a level, render the level\n    else {\n        return this.play();\n      }\n  }\n\n}","map":{"version":3,"sources":["/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Components/HomeScreen.js"],"names":["React","Component","LevelContainer","LevelSelector","HomeScreen","state","playLevel","levels","selectedLevel","totalPoints","played","componentDidMount","getLevels","levelSelect","playedOnce","map","level","i","loadLevel","info","obj","setState","fetch","then","resp","json","data","play","levelComplete","completed","levelPoints","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport LevelContainer from '../Containers/LevelContainer'\nimport LevelSelector from '../Components/LevelSelector'\n\n//this component holds the homescreen, including level selection and potentially other options\n\nexport default class HomeScreen extends Component{\n\n    state = {\n        playLevel: false,\n        levels: [],\n        selectedLevel: null,\n        totalPoints: 0,\n        played\n    }\n\n    //calls the fetch to load level options\n    componentDidMount = () => {\n        this.getLevels()\n    }\n\n    //renders buttons for each load-able level\n    levelSelect = () => {\n        return(\n            <div>\n                <div className='home-screen-header'>\n                    <h4>Select A Level</h4>\n                </div>\n                <div>\n                    <p>{this.state.playedOnce ? `Your New Total Score: ${this.state.totalPoints}` : `Your Total Score: ${this.state.totalPoints}`}</p>\n                </div>\n\n                <div className='home-screen-body'>\n                    {this.state.levels.map((level, i) => <LevelSelector key={i}{...level} \n                    loadLevel={this.loadLevel}\n                    />)}\n                </div>\n            </div>\n        )\n    }\n    //uses info from the levelSelector button to set the selected level, and start the level\n    loadLevel = (info) => {\n        let obj = info\n        this.setState({\n            selectedLevel: obj,\n            playLevel: true\n        })\n    }\n    //fetches the levels\n    getLevels = () => {\n        fetch('http://localhost:3000/levels')\n        .then(resp => resp.json())\n        .then(data => {\n           this.setState({\n               levels: data\n           })\n        })\n    }\n\n    //renders the levelContainer (AKA the selected level)\n    play = () => {\n        return (\n            <LevelContainer \n            selectedLevel={this.state.selectedLevel}\n            levelComplete={this.levelComplete}\n            // playLevel={this.state.playLevel}\n            />\n        )\n    }\n\n    levelComplete = (completed, levelPoints) =>{\n        if (completed === true){\n            this.setState({\n            totalPoints: this.state.totalPoints + levelPoints\n            })\n        }\n        this.setState({\n            playLevel: false,\n        })\n    }\n\n    render() {\n        //until a level is selected, show the levels avaiable\n        if (this.state.playLevel === false){\n            return (\n                this.levelSelect()\n            )\n        } \n        //after selected a level, render the level\n        else {\n            return (\n                this.play()\n            )\n        }\n    }\n        \n    \n\n}"]},"metadata":{},"sourceType":"module"}