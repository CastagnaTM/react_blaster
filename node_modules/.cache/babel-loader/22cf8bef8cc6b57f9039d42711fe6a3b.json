{"ast":null,"code":"var _jsxFileName = \"/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/LevelContainer.js\";\nimport React, { Component } from 'react';\nimport Targets from '../Components/Targets';\nimport LevelEnd from '../Components/LevelEnd';\nimport friendlySmall from '../Assets/FriendlySmall.png';\nimport friendlyStrike from '../Assets/FriendlyStrike.png';\nimport healthFull from '../Assets/HealthFull.png';\nimport health3 from '../Assets/Health3.png';\nimport health2 from '../Assets/Health2.png';\nimport health1 from '../Assets/Health1.png';\nimport healthEmpty from '../Assets/HealthEmpty.png';\nimport levelOne from '../Assets/Audio/levelOne.mp3';\nimport levelTwo from '../Assets/Audio/levelTwo.mp3';\nimport levelThree from '../Assets/Audio/levelThree.mp3';\nlet music;\nexport default class LevelContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedLevel: this.props.selectedLevel,\n      blasterPower: this.props.blasterPower,\n      health: this.props.health,\n      maxHealth: this.props.maxHealth,\n      targets: null,\n      counter: 0,\n      isClicked: 0,\n      levelPoints: 0,\n      success: false,\n      levelEnd: false,\n      firendlyBackgroundColor: '#18FCFF',\n      debrisBackgroundColor: '#0B162A',\n      hitFriendlyCount: 0\n    };\n\n    this.componentDidMount = () => {\n      music = new Audio(this.getMusic());\n      this.runGame();\n    };\n\n    this.getMusic = () => {\n      switch (this.state.selectedLevel.name) {\n        case 'Level One':\n          return levelOne;\n\n        case 'Level Two':\n          return levelTwo;\n\n        case 'Level Three':\n          return levelThree;\n\n        default:\n          return levelOne;\n      }\n    };\n\n    this.handleClick = (name, target_type) => {\n      //finds the target that was clicked\n      let thisTarget = this.state.targets.find(target => target.name === name);\n\n      if (target_type !== 'asteroid') {\n        if (thisTarget.isClicked === 0) {\n          thisTarget.isClicked = 1; //conditional for responding to target type\n\n          if (target_type === 'debris') {\n            this.setState({\n              isClicked: 1,\n              levelPoints: this.state.levelPoints + 1\n            });\n          }\n\n          if (target_type === 'friendly') {\n            this.setState({\n              isClicked: 1,\n              levelPoints: this.state.levelPoints - 2,\n              hitFriendlyCount: this.state.hitFriendlyCount + 1\n            });\n          }\n\n          if (target_type === 'bomb') {\n            this.setState({\n              isClicked: 1,\n              health: this.state.health - 1\n            });\n          }\n        }\n      } else if (target_type === 'asteroid') {\n        if (thisTarget.isClicked < 2) {\n          thisTarget.isClicked += this.state.blasterPower;\n          this.setState({\n            isClicked: this.state.isClicked + this.state.blasterPower\n          });\n\n          if (thisTarget.isClicked >= 2) {\n            this.setState({\n              levelPoints: this.state.levelPoints + 3\n            });\n          }\n        }\n      }\n    };\n\n    this.resetTargets = () => {\n      let targetsCopy = [...this.state.targets];\n\n      for (const target of targetsCopy) {\n        target.isClicked = 0;\n      }\n    };\n\n    this.establishTargets = string => {\n      let targets = [];\n      let targetArray = string.split('');\n\n      for (let i = 0; i < targetArray.length; i++) {\n        if (targetArray[i] === '0') {\n          targets.push({\n            name: i,\n            target_type: 'debris',\n            isClicked: 0\n          });\n        } else if (targetArray[i] === '1') {\n          targets.push({\n            name: i,\n            target_type: 'friendly',\n            isClicked: 0\n          });\n        } else if (targetArray[i] === '2') {\n          targets.push({\n            name: i,\n            target_type: 'bomb',\n            isClicked: 0\n          });\n        } else if (targetArray[i] === '3') {\n          targets.push({\n            name: i,\n            target_type: 'asteroid',\n            isClicked: 0\n          });\n        }\n      }\n\n      this.setState({\n        targets: targets\n      });\n    };\n\n    this.loadLevelGrid = () => {\n      this.setState({\n        targets: this.shuffleGrid(this.state.targets)\n      });\n    };\n\n    this.shuffleGrid = array => {\n      let currentIndex = array.length,\n          temp,\n          random;\n\n      while (0 !== currentIndex) {\n        random = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temp = array[currentIndex];\n        array[currentIndex] = array[random];\n        array[random] = temp;\n      }\n\n      return array;\n    };\n\n    this.renderTargets = () => {\n      return this.state.targets.map(target => React.createElement(Targets, Object.assign({\n        handleClick: this.handleClick,\n        key: target.name\n      }, target, {\n        friendlyBackgroundColor: this.state.friendlyBackgroundColor,\n        debrisBackgroundColor: this.state.debrisBackgroundColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      })));\n    };\n\n    this.playMusic = () => {\n      music.play();\n    };\n\n    this.stopMusic = () => {\n      music.pause();\n      music.currentTime = 0.0;\n    };\n\n    this.getHealth = () => {\n      if (this.state.health === this.state.maxHealth) {\n        return healthFull;\n      } else if (this.state.health >= this.state.maxHealth * 0.75 && this.state.health < this.state.maxHealth) {\n        return health3;\n      } else if (this.state.health >= this.state.maxHealth * 0.5 && this.state.health < this.state.maxHealth * 0.75) {\n        return health2;\n      } else if (this.state.health > 0 && this.state.health < this.state.maxHealth * 0.5) {\n        return health1;\n      } else {\n        return healthEmpty;\n      }\n    };\n\n    this.runGame = () => {\n      //translate targets function\n      if (this.state.targets === null) {\n        this.establishTargets(this.state.selectedLevel.targetString);\n      }\n\n      this.playMusic();\n      var gameLoop = setInterval(() => {\n        this.resetTargets();\n        this.loadLevelGrid();\n        this.setState({\n          counter: this.state.counter + 1\n        }); //conditions for level ending\n\n        if (this.state.counter === 15 && this.state.levelPoints >= this.state.selectedLevel.goal) {\n          clearInterval(gameLoop);\n          this.stopMusic();\n          this.setState({\n            success: true,\n            levelEnd: true\n          });\n        } else if (this.state.counter === 15 || this.state.levelPoints < 0 || this.state.hitFriendlyCount === 3 || this.state.health === 0) {\n          clearInterval(gameLoop);\n          this.stopMusic();\n          this.setState({\n            levelEnd: true\n          });\n        }\n      }, 2000);\n    };\n  }\n\n  render() {\n    if (this.state.targets === null) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, \"LOADING!\");\n    }\n\n    if (this.state.levelEnd) {\n      return React.createElement(\"div\", {\n        className: this.props.selectedLevel.css,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(LevelEnd, {\n        levelName: this.state.selectedLevel.name,\n        health: this.state.health,\n        success: this.state.success,\n        levelPoints: this.state.levelPoints,\n        levelEnd: this.state.levelEnd,\n        levelComplete: this.props.levelComplete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      className: this.props.selectedLevel.css,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: this.props.selectedLevel.name === 'Level Three' ? 'level-three-column' : 'level-column',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"health-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"health-img\",\n      src: this.getHealth(),\n      alt: \"health meter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-play-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, this.renderTargets())))), React.createElement(\"div\", {\n      className: \"score-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"strikes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"strikes-tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"stikes-img\",\n      src: this.state.hitFriendlyCount >= 1 ? friendlyStrike : friendlySmall,\n      alt: \"alien strikes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"strikes-tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"stikes-img\",\n      src: this.state.hitFriendlyCount >= 2 ? friendlyStrike : friendlySmall,\n      alt: \"alien strikes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"strikes-tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"stikes-img\",\n      src: this.state.hitFriendlyCount === 3 ? friendlyStrike : friendlySmall,\n      alt: \"alien strikes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"level-score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        color: 'whitesmoke',\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"Score: \", this.state.levelPoints))));\n  }\n\n}","map":{"version":3,"sources":["/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/LevelContainer.js"],"names":["React","Component","Targets","LevelEnd","friendlySmall","friendlyStrike","healthFull","health3","health2","health1","healthEmpty","levelOne","levelTwo","levelThree","music","LevelContainer","state","selectedLevel","props","blasterPower","health","maxHealth","targets","counter","isClicked","levelPoints","success","levelEnd","firendlyBackgroundColor","debrisBackgroundColor","hitFriendlyCount","componentDidMount","Audio","getMusic","runGame","name","handleClick","target_type","thisTarget","find","target","setState","resetTargets","targetsCopy","establishTargets","string","targetArray","split","i","length","push","loadLevelGrid","shuffleGrid","array","currentIndex","temp","random","Math","floor","renderTargets","map","friendlyBackgroundColor","playMusic","play","stopMusic","pause","currentTime","getHealth","targetString","gameLoop","setInterval","goal","clearInterval","render","css","levelComplete","color","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Targets from '../Components/Targets'\nimport LevelEnd from '../Components/LevelEnd'\nimport friendlySmall from '../Assets/FriendlySmall.png'\nimport friendlyStrike from '../Assets/FriendlyStrike.png'\nimport healthFull from '../Assets/HealthFull.png'\nimport health3 from '../Assets/Health3.png'\nimport health2 from '../Assets/Health2.png'\nimport health1 from '../Assets/Health1.png'\nimport healthEmpty from '../Assets/HealthEmpty.png'\nimport levelOne from '../Assets/Audio/levelOne.mp3'\nimport levelTwo from '../Assets/Audio/levelTwo.mp3'\nimport levelThree from '../Assets/Audio/levelThree.mp3'\nlet music;\n\n\n\nexport default class LevelContainer extends Component{\n\n\n    state = {\n        selectedLevel: this.props.selectedLevel, \n        blasterPower: this.props.blasterPower,\n        health: this.props.health,\n        maxHealth: this.props.maxHealth,\n        targets: null,\n        counter: 0,\n        isClicked: 0,\n        levelPoints: 0,\n        success: false,\n        levelEnd: false,\n        firendlyBackgroundColor: '#18FCFF',\n        debrisBackgroundColor: '#0B162A',\n        hitFriendlyCount: 0\n    }\n\n    //loads everything and holds setInterval loops\n    componentDidMount = () => {\n        music = new Audio(this.getMusic())\n        this.runGame()    \n    }\n    getMusic = () => {\n        switch (this.state.selectedLevel.name){\n            case 'Level One':\n                return levelOne;\n            case 'Level Two':\n                return levelTwo;\n            case 'Level Three':\n                return levelThree;\n            default:\n                return levelOne\n        }\n    }\n\n    //function for handling target clicks\n    handleClick = (name, target_type) => {\n        //finds the target that was clicked\n        let thisTarget = this.state.targets.find(target => target.name === name)\n        if(target_type !== 'asteroid'){\n            if(thisTarget.isClicked === 0){\n                thisTarget.isClicked = 1\n                //conditional for responding to target type\n                if(target_type === 'debris'){\n                    this.setState({\n                        isClicked: 1,\n                        levelPoints: this.state.levelPoints+1\n                    })\n                }\n                if(target_type === 'friendly'){\n                    this.setState({\n                        isClicked: 1,\n                        levelPoints: this.state.levelPoints-2,\n                        hitFriendlyCount: this.state.hitFriendlyCount+1\n                    })\n                }\n                if(target_type === 'bomb'){\n                    this.setState({\n                        isClicked: 1,\n                        health: this.state.health-1\n                    })\n                }\n            }\n        }\n        else if(target_type === 'asteroid'){\n            if(thisTarget.isClicked < 2){\n                thisTarget.isClicked += this.state.blasterPower;\n                this.setState({\n                    isClicked: this.state.isClicked + this.state.blasterPower\n                })\n                if(thisTarget.isClicked >= 2){\n                    this.setState({\n                        levelPoints: this.state.levelPoints+3\n                    })\n                }\n            }        \n        }\n    }\n\n    // resets the state for targets, used for setInterval loop\n    resetTargets = () => {\n        let targetsCopy = [...this.state.targets];\n        for(const target of targetsCopy){\n            target.isClicked = 0\n        }\n    }\n    //translates targetString into objects\n    establishTargets = (string) => {\n        \n        let targets = [];\n        let targetArray = string.split('');\n        for (let i = 0; i < targetArray.length; i++){\n            if(targetArray[i] === '0'){\n                targets.push({name: i, target_type: 'debris', isClicked: 0})\n            }\n            else if(targetArray[i] === '1'){\n                targets.push({name: i, target_type: 'friendly', isClicked: 0})\n            }\n            else if(targetArray[i] === '2'){\n                targets.push({name: i, target_type: 'bomb', isClicked: 0})\n            }\n            else if(targetArray[i] === '3'){\n                targets.push({name: i, target_type: 'asteroid', isClicked: 0})\n            }\n        }\n        this.setState({\n            targets: targets\n        })\n    }\n  \n    //load the targets\n    loadLevelGrid = () => {\n        this.setState({\n            targets: this.shuffleGrid(this.state.targets)\n        })\n    }\n\n    //shuffles the targets for loading\n    shuffleGrid = (array) => {\n        let currentIndex = array.length, temp, random;\n        while(0 !== currentIndex){\n            random = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temp = array[currentIndex];\n            array[currentIndex] = array[random];\n            array[random] = temp;\n        }\n        return array\n    }\n\n    // passes the targets to the Target component\n    renderTargets = () => {\n        return this.state.targets.map(target => <Targets \n        handleClick={this.handleClick} key={target.name}{...target}\n        friendlyBackgroundColor={this.state.friendlyBackgroundColor}\n        debrisBackgroundColor={this.state.debrisBackgroundColor}\n        />)\n        \n    }\n    playMusic = () => {\n        music.play();\n    }\n\n    stopMusic = () => {\n        music.pause();\n        music.currentTime = 0.0;\n    }\n\n    getHealth = () => {\n        if(this.state.health === this.state.maxHealth){\n            return healthFull;\n        }\n        else if (this.state.health >= (this.state.maxHealth * 0.75) && this.state.health < (this.state.maxHealth)){\n            return health3;\n        }\n        else if(this.state.health >= (this.state.maxHealth * 0.5) && this.state.health < (this.state.maxHealth * 0.75)){\n            return health2;\n        }\n        else if (this.state.health > 0 && this.state.health < (this.state.maxHealth * 0.5)){\n            return health1;\n        }\n        else{\n            return healthEmpty;\n        }\n    }\n\n    runGame = () => {\n        //translate targets function\n        if (this.state.targets === null){\n            this.establishTargets(this.state.selectedLevel.targetString)\n        }\n        this.playMusic();\n        var gameLoop = setInterval(() =>{\n            this.resetTargets()\n            this.loadLevelGrid()\n            this.setState({\n                counter: this.state.counter+1\n            })\n            //conditions for level ending\n            if(this.state.counter === 15 && this.state.levelPoints >= this.state.selectedLevel.goal){ \n                clearInterval(gameLoop)\n                this.stopMusic()\n                this.setState({\n                    success: true,\n                    levelEnd: true\n                })\n            }\n            else if(this.state.counter === 15 || this.state.levelPoints < 0 || this.state.hitFriendlyCount === 3\n                || this.state.health === 0){\n                clearInterval(gameLoop)\n                this.stopMusic()\n                this.setState({\n                    levelEnd: true\n                })\n            }\n        }, 2000)\n    }\n\n    render() {\n        if (this.state.targets === null){\n            return <h1>LOADING!</h1>\n        }\n        if (this.state.levelEnd){\n            return(\n                <div className={this.props.selectedLevel.css}>\n                    <LevelEnd\n                    levelName={this.state.selectedLevel.name}\n                    health={this.state.health} \n                    success={this.state.success}\n                    levelPoints={this.state.levelPoints}\n                    levelEnd={this.state.levelEnd}\n                    levelComplete={this.props.levelComplete}\n                    />\n                </div>    \n            )\n        }\n        return (\n\n            <div className={this.props.selectedLevel.css}>\n                <div className={this.props.selectedLevel.name === 'Level Three' ? 'level-three-column' : 'level-column'}>\n                    <div className='health-container'>\n                        <img className='health-img' src={this.getHealth()} alt=\"health meter\"></img>\n                    </div>\n                    <div className='game-play-container'>\n                        <div className='tile-grid-container'>\n                            <div className='tile-grid'>\n                                {this.renderTargets()}\n                            </div>\n                        </div>\n                        \n                    </div>\n                </div>\n                <div className='score-container'>\n                    <div className='strikes'>   \n                        <div className='strikes-tile'>\n                            <img className='stikes-img' src={this.state.hitFriendlyCount >= 1 ? friendlyStrike : friendlySmall} alt=\"alien strikes\"></img>\n                        </div>\n                        <div className='strikes-tile'>\n                            <img className='stikes-img' src={this.state.hitFriendlyCount >= 2 ? friendlyStrike : friendlySmall} alt=\"alien strikes\"></img>\n                        </div>\n                        <div className='strikes-tile'>        \n                            <img className='stikes-img' src={this.state.hitFriendlyCount === 3 ? friendlyStrike : friendlySmall} alt=\"alien strikes\"></img>\n                        </div>\n                    </div> \n                    <div className='level-score'>\n                        <p style={{color:'whitesmoke', textAlign: 'center'}}>Score: {this.state.levelPoints}</p>\n                    </div>\n                </div> \n            </div>\n            \n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}