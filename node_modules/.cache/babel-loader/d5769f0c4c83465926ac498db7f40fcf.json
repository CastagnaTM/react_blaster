{"ast":null,"code":"var _jsxFileName = \"/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/LevelContainer.js\";\nimport React, { Component } from 'react';\nimport Targets from '../Components/Targets';\nexport default class LevelContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedLevel: this.props.selectedLevel,\n      //this should hold all info the container needs to render this level\n      counter: 0,\n      isClicked: false,\n      levelPoints: 0,\n      levelComplete: false\n    };\n\n    this.handleClick = (name, target_type) => {\n      //finds the target that was clicked\n      let thisTarget = this.state.levelTargets.find(target => target.name === name);\n      thisTarget.isClicked = true; //conditional for responding to target type\n\n      if (target_type === 'debris') {\n        this.setState({\n          isClicked: true,\n          levelPoints: this.state.levelPoints + 1\n        });\n      }\n\n      if (target_type === 'friendly') {\n        this.setState({\n          isClicked: true,\n          levelPoints: this.state.levelPoints - 2\n        });\n      }\n    };\n\n    this.resetTargets = () => {\n      let targetsCopy = [...this.state.levelTargets];\n\n      for (const target of targetsCopy) {\n        target.isClicked = false;\n      }\n    };\n\n    this.componentDidMount = () => {\n      var gameLoop = setInterval(() => {\n        if (this.state.levelTargets !== null) {\n          this.resetTargets();\n        }\n\n        this.loadLevelGrid(this.state.selectedLevel.name);\n        this.setState({\n          counter: this.state.counter + 1\n        }); //conditions for level ending\n\n        if (this.state.counter === 5) {\n          clearInterval(gameLoop);\n          this.setState({\n            levelComplete: true\n          });\n          this.props.levelComplete(this.state.levelComplete, this.state.levelPoints); // this will need to take in values (pass/fail, points)\n        }\n\n        if (this.state.levelPoints < 0) {\n          clearInterval(gameLoop);\n          this.props.levelComplete(this.state.levelComplete, this.state.levelPoints);\n        }\n      }, 2000);\n    };\n\n    this.loadLevelGrid = name => {\n      // debugger\n      let baseTargets = [...this.state.baseTargets];\n\n      if (name === 'level two') {\n        baseTargets.push({\n          name: 'five',\n          target_type: 'debris',\n          isClicked: false\n        }, {\n          name: 'six',\n          target_type: 'debris',\n          isClicked: false\n        }, {\n          name: 'seven',\n          target_type: 'friendly',\n          isClicked: false\n        }, {\n          name: 'eight',\n          target_type: 'friendly',\n          isClicked: false\n        });\n      }\n\n      this.setState({\n        levelTargets: this.shuffleGrid(this.state.baseTargets)\n      });\n    };\n\n    this.shuffleGrid = array => {\n      let currentIndex = array.length,\n          temp,\n          random;\n\n      while (0 !== currentIndex) {\n        random = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temp = array[currentIndex];\n        array[currentIndex] = array[random];\n        array[random] = temp;\n      }\n\n      return array;\n    };\n\n    this.renderTargets = () => {\n      return this.state.levelTargets.map((tile, i) => React.createElement(Targets, Object.assign({\n        handleClick: this.handleClick,\n        key: i\n      }, tile, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      })));\n    };\n  }\n\n  render() {\n    if (this.state.levelTargets === null) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"LOADING!\");\n    }\n\n    return React.createElement(\"div\", {\n      className: this.props.selectedLevel.css,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, this.renderTargets())), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Score: \", this.state.levelPoints)));\n  }\n\n}","map":{"version":3,"sources":["/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Containers/LevelContainer.js"],"names":["React","Component","Targets","LevelContainer","state","selectedLevel","props","counter","isClicked","levelPoints","levelComplete","handleClick","name","target_type","thisTarget","levelTargets","find","target","setState","resetTargets","targetsCopy","componentDidMount","gameLoop","setInterval","loadLevelGrid","clearInterval","baseTargets","push","shuffleGrid","array","currentIndex","length","temp","random","Math","floor","renderTargets","map","tile","i","render","css"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Targets from '../Components/Targets'\n\n\n\nexport default class LevelContainer extends Component{\n\n    //refactor later to use a switch statement to run through these functions based on which level is selected\n\n    state = {\n        selectedLevel: this.props.selectedLevel, //this should hold all info the container needs to render this level\n\n        \n        counter: 0,\n        isClicked: false,\n        levelPoints: 0,\n        levelComplete: false \n       \n    }\n\n    //function for handling target clicks\n    handleClick = (name, target_type) => {\n        //finds the target that was clicked\n        let thisTarget = this.state.levelTargets.find(target => target.name === name)\n        thisTarget.isClicked = true\n        //conditional for responding to target type\n        if(target_type === 'debris'){\n            this.setState({\n                isClicked: true,\n                levelPoints: this.state.levelPoints+1\n            })\n        }\n        if(target_type === 'friendly'){\n            this.setState({\n                isClicked: true,\n                levelPoints: this.state.levelPoints-2\n            })\n        }\n    }\n\n    // resets the state for targets, used for setInterval loop\n    resetTargets = () => {\n        let targetsCopy = [...this.state.levelTargets];\n        for(const target of targetsCopy){\n            target.isClicked = false\n        }\n    }\n    \n    //loads everything and holds setInterval loops\n    componentDidMount = () => {\n        \n        var gameLoop = setInterval(() =>{\n            if(this.state.levelTargets!==null){\n                this.resetTargets()\n            }\n            this.loadLevelGrid(this.state.selectedLevel.name)\n            this.setState({\n                counter: this.state.counter+1\n            })\n            //conditions for level ending\n            if(this.state.counter === 5 ){\n                clearInterval(gameLoop)\n                this.setState({\n                    levelComplete: true\n                })\n                this.props.levelComplete(this.state.levelComplete, this.state.levelPoints) // this will need to take in values (pass/fail, points)\n            }\n            if(this.state.levelPoints < 0){\n                clearInterval(gameLoop)\n                this.props.levelComplete(this.state.levelComplete, this.state.levelPoints)\n            }\n        }, 2000)    \n        \n    }\n  \n    //this should be a general load level grid function with a switch statement determining what to load based on selected level\n    //load the targets\n    loadLevelGrid = (name) => {\n        // debugger\n        let baseTargets = [...this.state.baseTargets]\n        if(name === 'level two'){\n            baseTargets.push({name: 'five', target_type: 'debris', isClicked: false},{name: 'six', target_type: 'debris', isClicked: false},{name: 'seven', target_type: 'friendly', isClicked: false},{name: 'eight', target_type: 'friendly', isClicked: false})\n        }\n        \n        this.setState({\n            levelTargets: this.shuffleGrid(this.state.baseTargets)\n        })\n\n    }\n    \n       \n    \n    //shuffles the targets for loading\n    shuffleGrid = (array) => {\n        let currentIndex = array.length, temp, random;\n        while(0 !== currentIndex){\n            random = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temp = array[currentIndex];\n            array[currentIndex] = array[random];\n            array[random] = temp;\n        }\n        return array\n    }\n    //passes the targets to the Target component\n    renderTargets = () => {\n        return this.state.levelTargets.map((tile, i) => <Targets handleClick={this.handleClick} key={i}{...tile}/>)\n    }\n\n    render() {\n        if (this.state.levelTargets === null){\n            return <h1>LOADING!</h1>\n        }\n        return (\n            <div className={this.props.selectedLevel.css}>    \n                <div className='tile-grid-container'>\n                    <div className='tile-grid'>\n                        {this.renderTargets()}\n                    </div>\n                </div>\n                <div>\n                    <p>Score: {this.state.levelPoints}</p>\n                </div>\n            </div>\n        )\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}