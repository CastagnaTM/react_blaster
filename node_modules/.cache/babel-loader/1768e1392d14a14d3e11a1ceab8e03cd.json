{"ast":null,"code":"var _jsxFileName = \"/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Components/LevelEnd.js\";\nimport React, { Component } from 'react';\nimport BossIntro from './BossIntro';\nlet highscores;\nexport default class LevelEnd extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      gameEnd: false,\n      highscores: null,\n      name: '',\n      score: null,\n      show: false,\n      showBossIntro: false,\n      currentWinner: null,\n      showForme\n    };\n\n    this.componentDidMount = () => {\n      if (this.props.success) {\n        this.setCurrentScore();\n        this.getHighscores();\n      }\n    };\n\n    this.handleReturn = () => {\n      this.props.levelComplete(this.props.success, this.props.levelPoints, this.props.health);\n    };\n\n    this.handleBossIntro = () => {\n      this.setState({\n        showBossIntro: true\n      });\n    };\n\n    this.displayHighscores = () => {\n      let allHighscores = this.state.highscores;\n\n      if (this.state.currentWinner !== null) {\n        allHighscores.push(this.state.currentWinner);\n      }\n\n      allHighscores.sort((a, b) => a.score < b.score ? 1 : -1);\n      highscores = allHighscores.slice(0, 5);\n      return highscores.map(score => React.createElement(\"li\", {\n        key: score.id,\n        className: \"text\",\n        style: {\n          marginLeft: '34%',\n          padding: '1%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, score.name, \" . . . \", score.score));\n    };\n\n    this.setCurrentScore = () => {\n      this.setState({\n        score: this.props.levelPoints + this.props.totalPoints + 2000\n      });\n    };\n\n    this.getHighscores = () => {\n      fetch('http://localhost:3000/users').then(resp => resp.json()).then(data => {\n        this.setState({\n          highscores: data\n        });\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleHighScores = event => {\n      event.preventDefault();\n      fetch('http://localhost:3000/highscore', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Accept': \"application/json\"\n        },\n        body: JSON.stringify({\n          name: this.state.name,\n          score: this.state.score\n        })\n      }).then(resp => resp.json()).then(data => {\n        if (data.errors) {\n          alert(data.errors);\n        }\n      });\n      this.setState({\n        show: true,\n        name: this.state.name,\n        score: this.state.score,\n        currentWinner: {\n          name: this.state.name,\n          score: this.state.score\n        }\n      });\n    };\n  }\n\n  render() {\n    if (this.state.showBossIntro === true) {\n      return React.createElement(BossIntro, {\n        health: this.props.health,\n        success: this.props.success,\n        levelPoints: this.props.levelPoints,\n        levelComplete: this.props.levelComplete,\n        handleReturn: this.handleReturn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(\"div\", {\n        className: \"level-end-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"level-end-grid\",\n        style: {\n          display: this.props.scoresView ? 'none' : 'block'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"text\",\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, this.props.success ? \"Congrats! You Scored \".concat(this.props.levelPoints, \" Points!\") : 'Sorry, you lost this time around...'), React.createElement(\"p\", {\n        className: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, this.props.gameComplete ? \"You Beat The Game With \".concat(this.state.score, \" Points! Enter Your Name Below:\") : null)), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        style: {\n          display: this.props.gameComplete ? 'none' : 'block'\n        },\n        className: \"hvr-ripple-out\",\n        onClick: this.props.levelName === 'Level Three' && this.props.success ? this.handleBossIntro : this.handleReturn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Continue\"))), React.createElement(\"div\", {\n        className: \"highscores-container\",\n        style: {\n          display: this.props.gameComplete ? 'block' : 'none'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: \"text\",\n        style: {\n          marginLeft: '40%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"High Scores\"), React.createElement(\"form\", {\n        className: \"form\",\n        onSubmit: this.handleHighScores,\n        style: {\n          display: this.state.score > Math.min(this.state.highscores) ? 'block' : 'none'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"input\",\n        name: \"name\",\n        value: this.state.name,\n        onChange: this.handleChange,\n        placeholder: \"Name...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"scores-button\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Submit\")), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, this.state.highscores ? this.displayHighscores() : null)));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/tomcastagna/Development/code/mod_five/Project/space_friends/src/Components/LevelEnd.js"],"names":["React","Component","BossIntro","highscores","LevelEnd","state","gameEnd","name","score","show","showBossIntro","currentWinner","showForme","componentDidMount","props","success","setCurrentScore","getHighscores","handleReturn","levelComplete","levelPoints","health","handleBossIntro","setState","displayHighscores","allHighscores","push","sort","a","b","slice","map","id","marginLeft","padding","totalPoints","fetch","then","resp","json","data","handleChange","event","target","value","handleHighScores","preventDefault","method","headers","body","JSON","stringify","errors","alert","render","display","scoresView","textAlign","gameComplete","levelName","Math","min"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport BossIntro from './BossIntro'\n\nlet highscores;\n\nexport default class LevelEnd extends Component {\n\n    state = {\n        gameEnd: false,\n        highscores: null,\n        name: '',\n        score: null,\n        show: false,\n        showBossIntro: false,\n        currentWinner: null,\n        showForme\n    }\n\n    componentDidMount = () => {\n        \n        if(this.props.success){\n            this.setCurrentScore()\n            this.getHighscores()\n        }\n    }\n\n    handleReturn = () => {\n        this.props.levelComplete(this.props.success, this.props.levelPoints, this.props.health)\n    }\n    handleBossIntro = () => {\n        this.setState({\n            showBossIntro: true\n        })\n    }\n\n    displayHighscores = () => {\n        let allHighscores = this.state.highscores\n        if(this.state.currentWinner !== null){\n            allHighscores.push(this.state.currentWinner)\n        }\n        allHighscores.sort((a,b) => a.score < b.score ? 1 : -1)\n        highscores = allHighscores.slice(0,5)\n        return( highscores.map(score => <li key={score.id} className='text' style={{marginLeft: '34%', padding: '1%'}}>{score.name} . . . {score.score}</li>) )\n    }\n\n    setCurrentScore = () => {\n        this.setState({\n            score: this.props.levelPoints + this.props.totalPoints + 2000\n        })\n    }\n\n    getHighscores = () => {\n        fetch('http://localhost:3000/users')\n        .then(resp => resp.json())\n        .then(data => {\n            this.setState({\n                highscores: data\n            })\n        })\n    }\n\n    handleChange = (event) => {\n        this.setState({\n          [event.target.name]: event.target.value\n        })\n    }\n\n    handleHighScores = (event) => {\n        event.preventDefault()\n        fetch('http://localhost:3000/highscore',{\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Accept': \"application/json\"\n            },\n            body: JSON.stringify({\n                name: this.state.name,\n                score: this.state.score\n                })\n        })\n        .then(resp => resp.json())\n        .then(data => {\n            if (data.errors){\n                alert(data.errors)\n            }\n        })\n        this.setState({\n            show: true,\n            name: this.state.name,\n            score: this.state.score,\n            currentWinner: {name: this.state.name, score: this.state.score}\n        })\n    }\n\n    render(){\n        if(this.state.showBossIntro === true){\n            return(\n                <BossIntro\n                    health={this.props.health} \n                    success={this.props.success}\n                    levelPoints={this.props.levelPoints}\n                    levelComplete={this.props.levelComplete}\n                    handleReturn={this.handleReturn} \n                />\n            )\n        }\n        else{\n            return(\n                <div className='level-end-container'>\n                    <div className='level-end-grid' style={{display: this.props.scoresView ? 'none' : 'block'}}>\n                        <div>\n                            <p className='text' style={{textAlign: 'center'}}>\n                                {this.props.success ? `Congrats! You Scored ${this.props.levelPoints} Points!` : 'Sorry, you lost this time around...'}\n                            </p>\n                            <p className='text'>\n                            {this.props.gameComplete ? `You Beat The Game With ${this.state.score} Points! Enter Your Name Below:` : null}\n                            </p>\n                        </div>\n                        <div>\n                            <button style={{display: this.props.gameComplete ? 'none' : 'block'}}\n                            className='hvr-ripple-out' \n                            onClick={this.props.levelName === 'Level Three' && this.props.success ? this.handleBossIntro : this.handleReturn}>Continue</button>\n                        </div>\n                    </div>\n                    <div className='highscores-container' style={{display: this.props.gameComplete ? 'block' : 'none'}}>\n                        <h4 className='text' style={{marginLeft: '40%'}}>High Scores</h4>\n                        <form className=\"form\" onSubmit={this.handleHighScores} style={{display: this.state.score > Math.min(this.state.highscores) ? 'block' : 'none'}}>\n                            <input className=\"input\" name=\"name\" value={this.state.name} onChange={this.handleChange} placeholder=\"Name...\" />\n                            <button className='scores-button' type=\"submit\">Submit</button>\n                        </form>\n                        <ul>\n                            {this.state.highscores ? this.displayHighscores() : null}\n                        </ul>\n                    </div>\n                </div>\n            )\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}